package cyclops.collections.clojure;

import java.util.AbstractList;
import java.util.Collection;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.oath.cyclops.data.collections.extensions.CollectionX;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.LazyPVectorX;
import com.oath.cyclops.types.Unwrapable;
import com.oath.cyclops.types.foldable.Evaluation;
import cyclops.collections.immutable.VectorX;
import cyclops.function.Reducer;
import cyclops.reactive.ReactiveSeq;
import cyclops.data.tuple.Tuple2;
import com.oath.cyclops.types.persistent.PersistentList;


import clojure.lang.PersistentVector;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ClojureVectorX<T> extends AbstractList<T> implements PersistentList<T>, Unwrapable {

    public static <T> VectorX<T> vectorX(ReactiveSeq<T> stream){
        return fromStream(stream);
    }
    public static <T> VectorX<T> copyFromCollection(CollectionX<T> vec) {
        return ClojureVectorX.<T>empty()
                .plusAll(vec);

    }
    @Override
    public <R> R unwrap() {
        return (R)vector;
    }
    /**
     * Create a LazyPVectorX from a Stream
     *
     * @param stream to construct a LazyQueueX from
     * @return LazyPVectorX
     */
    public static <T> LazyPVectorX<T> fromStream(Stream<T> stream) {
        Reducer<PersistentList<T>,T> v = toPersistentList();
        return new LazyPVectorX<T>(null, ReactiveSeq.fromStream(stream),v, Evaluation.LAZY);
    }

    /**
     * Create a LazyPVectorX that contains the Integers between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPVectorX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPVectorX that contains the Longs between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPVectorX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a ListX
     *
     * <pre>
     * {@code
     *  LazyPVectorX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     *
     * //(1,2,3,4,5)
     *
     * }</pre>
     *
     * @param seed Initial value
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return ListX generated by unfolder function
     */
    public static <U, T> LazyPVectorX<T> unfold(U seed, Function<? super U, Option<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPVectorX from the provided Supplier up to the provided limit number of times
     *
     * @param limit Max number of elements to generate
     * @param s Supplier to generate ListX elements
     * @return ListX generated from the provided Supplier
     */
    public static <T> LazyPVectorX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                      .limit(limit));
    }

    /**
     * Create a LazyPVectorX by iterative application of a function to an initial element up to the supplied limit number of times
     *
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return ListX generated by iterative application
     */
    public static <T> LazyPVectorX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                      .limit(limit));
    }

    /**
     * <pre>
     * {@code
     * PersistentList<Integer> q = JSPersistentList.<Integer>toPersistentList()
                                     .mapReduce(Stream.of(1,2,3,4));
     *
     * }
     * </pre>
     * @return Reducer for PersistentList
     */
    public static <T> Reducer<PersistentList<T>,T> toPersistentList() {
        return Reducer.<PersistentList<T>> of(ClojureVectorX.emptyPersistentList(), (final PersistentList<T> a) -> b -> a.plusAll(b), (final T x) -> ClojureVectorX.singleton(x));
    }


    public static <T> ClojureVectorX<T> fromVector(PersistentVector vector){
        return new ClojureVectorX<>(vector);
    }

    public static <T> ClojureVectorX<T> emptyPersistentList(){
        return new ClojureVectorX<>(PersistentVector.EMPTY);
    }
    public static <T> LazyPVectorX<T> empty(){
        return fromPersistentList(new ClojureVectorX<>(PersistentVector.EMPTY), toPersistentList());
    }
    public static <T> LazyPVectorX<T> singleton(T t){
        PersistentVector result = PersistentVector.EMPTY;
        return fromPersistentList(new ClojureVectorX<>(result.cons(t)), toPersistentList());
    }
    public static <T> LazyPVectorX<T> of(T... t){
        PersistentVector vb = PersistentVector.create(t);

        return fromPersistentList(new ClojureVectorX<>(vb), toPersistentList());
    }
    public static <T> LazyPVectorX<T> PersistentList(PersistentVector q) {
        return fromPersistentList(new ClojureVectorX<T>(q), toPersistentList());
    }
    @SafeVarargs
    public static <T> LazyPVectorX<T> PersistentList(T... elements){
        return fromPersistentList(of(elements),toPersistentList());
    }
    @Wither
    private final PersistentVector vector;

    @Override
    public ClojureVectorX<T> plus(T e) {
        return withVector(vector.cons(e));
    }

    @Override
    public ClojureVectorX<T> plusAll(Collection<? extends T> list) {
        PersistentVector use = vector;
        for(T next : list)
            use = use.cons(next);
        return withVector(use);
     }


    @Override
    public ClojureVectorX<T> with(int i, T e) {
        if(i<0 || i>size())
            throw new IndexOutOfBoundsException("Index " + i + " is out of bounds - size : " + size());
        return withVector(vector.assocN(i,e));
    }

    @Override
    public PersistentList<T>  plus(int i, T e){
        if(size()==0 || i==size())
            return plus(e);
       ReactiveSeq<T> flux = ReactiveSeq.fromIterable(vector);
       ReactiveSeq<T> inserted = flux.insertAt(i, e);
       return fromStream(inserted);


    }
    private static <T> LazyPVectorX<T> fromPersistentList(PersistentList<T> vec, Reducer<PersistentList<T>,T> pVectorReducer) {
        return new LazyPVectorX<T>(vec,null, pVectorReducer, Evaluation.LAZY);
    }
    @Override
    public PersistentList<T> plusAll(int i, Collection<? extends T> list) {
        ReactiveSeq<T> flux = fromPersistentList(this,toPersistentList()).stream();
        ReactiveSeq<T> inserted = flux.insertAtS(i, (Stream<T>)list.stream());

        return fromStream(inserted);
    }

    @Override
    public PersistentList<T> minus(Object e) {

        return fromPersistentList(this,toPersistentList()).filter(i->!Objects.equals(i,e));
    }

    @Override
    public PersistentList<T> minusAll(Collection<?> list) {
        return (VectorX<T>)fromPersistentList(this,toPersistentList()).removeAllI((Iterable<T>)list);
    }

    public ClojureVectorX<T> tail(){
        return withVector(PersistentVector.create(vector.tail));
    }
    public T head(){
        return (T)vector.nth(0);
    }

    @Override
    public PersistentList<T> minus(int i) {

        return fromPersistentList(this,toPersistentList())
                        .zipWithIndex()
                        .filter(t->t.v2.intValue()!=i)
                        .map(t->t.v1);
    }

    @Override
    public PersistentList<T> subList(int start, int end) {
        return fromPersistentList(this,toPersistentList())
                .skip((long)start)
                .limit(end-start);

    }

    @Override
    public T get(int index) {
        return (T)vector.nth(index);
    }

    @Override
    public int size() {
        return vector.size();
    }


}
