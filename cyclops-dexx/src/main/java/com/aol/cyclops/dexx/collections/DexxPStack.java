package com.aol.cyclops.dexx.collections;

import java.util.AbstractList;
import java.util.Collection;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.PStack;


import com.aol.cyclops.Reducer;
import com.aol.cyclops.control.ReactiveSeq;
import com.aol.cyclops.reactor.collections.extensions.persistent.LazyPStackX;
import com.github.andrewoma.dexx.collection.Builder;
import com.github.andrewoma.dexx.collection.ConsList;
import com.github.andrewoma.dexx.collection.List;


import lombok.AccessLevel;
import lombok.AllArgsConstructor;

import lombok.experimental.Wither;
import reactor.core.publisher.Flux;


@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class DexxPStack<T> extends AbstractList<T>implements PStack<T> {

    /**
     * Create a LazyPStackX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPStackX
     */
    public static <T> LazyPStackX<T> fromStream(Stream<T> stream) {
        return new LazyPStackX<T>(
                                  Flux.from(ReactiveSeq.fromStream(stream)), toPStack());
    }

    /**
     * Create a LazyPStackX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPStackX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a ListX
     * 
     * <pre>
     * {@code 
     *  LazyPStackX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return ListX generated by unfolder function
     */
    public static <U, T> LazyPStackX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPStackX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate ListX elements
     * @return ListX generated from the provided Supplier
     */
    public static <T> LazyPStackX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPStackX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return ListX generated by iterative application
     */
    public static <T> LazyPStackX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PStack<Integer> q = JSPStack.<Integer>toPStack()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PStack
     */
    public static <T> Reducer<PStack<T>> toPStack() {
        return Reducer.<PStack<T>> of(DexxPStack.emptyPStack(), (final PStack<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> DexxPStack.singleton(x));
    }

    public static <T> DexxPStack<T> fromList(List<T> list) {
        return new DexxPStack<>(
                                 list);
    }

    public static <T> DexxPStack<T> emptyPStack() {

        return new DexxPStack<>(
                                ConsList.empty());
    }

    public static <T> LazyPStackX<T> empty() {
        return LazyPStackX.fromPStack(new DexxPStack<>(ConsList.empty()),
                                      toPStack());
    }

    public static <T> LazyPStackX<T> singleton(T t) {
        List<T> result = ConsList.empty();
        return LazyPStackX.fromPStack(new DexxPStack<>(
                                                        result.prepend(t)),
                                      toPStack());
    }

    public static <T> LazyPStackX<T> of(T... t) {

        Builder<T, ConsList<T>> lb = ConsList.<T>factory().newBuilder();
        for (T next : t)
            lb.add(next);
        List<T> vec = lb.build();
        return LazyPStackX.fromPStack(new DexxPStack<>(
                                                        vec),
                                      toPStack());
    }

    public static <T> LazyPStackX<T> PStack(List<T> q) {
        return LazyPStackX.fromPStack(new DexxPStack<T>(
                                                         q),
                                      toPStack());
    }

    @SafeVarargs
    public static <T> LazyPStackX<T> PStack(T... elements) {
        return LazyPStackX.fromPStack(of(elements), toPStack());
    }

    @Wither
    private final List<T> list;

    @Override
    public DexxPStack<T> plus(T e) {
        return withList(list.prepend(e));
    }

    @Override
    public DexxPStack<T> plusAll(Collection<? extends T> l) {
        List<T> vec = list;
        for (T next : l) {
            vec = vec.prepend(next);
        }

        return withList(vec);
    }

    @Override
    public DexxPStack<T> with(int i, T e) {
        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());
        
        return withList(list.set(i, e));
    }

    @Override
    public DexxPStack<T> plus(int i, T e) {
        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());
        if (i == 0)
            return withList(list.prepend(e));
        
        
        if (i == size() - 1) {

            return withList(list.append(e));
        }
        return withList(prependAll(list.drop(i).prepend(e),list.take(i)));
       

    }
    private List<T> prependAll(List<T> list,Iterable<T>... its) {
         List<T> result = list;
         for(Iterable<T> toprepend : its) {
             for(T next : toprepend){
                 result = result.prepend(next);
             }
         }
         return result;
    }
    private List<T> prependCol(List<T> list,Collection<T> toprepend) {
        List<T> result = list;
        for(T next : toprepend){
            result = result.prepend(next);
        }
        return result;
   }

    @Override
    public DexxPStack<T> plusAll(int i, Collection<? extends T> l) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());
        
        return withList(prependAll(list.drop(i),(Collection<T>)l,list.take(i)));
        
    }

    @Override
    public PStack<T> minus(Object e) {
        return LazyPStackX.fromPStack(this, toPStack())
                          .filter(i -> !Objects.equals(i, e));
    }

    @Override
    public PStack<T> minusAll(Collection<?> list) {
        return LazyPStackX.fromPStack(this, toPStack())
                          .removeAll((Iterable<T>) list);
    }

    public DexxPStack<T> tail() {
        return withList(list.tail());
    }

    public T head() {
        return list.get(0);
    }

    @Override
    public PStack<T> minus(int i) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());
        if (i == 0)
            return withList(list.drop(1));
        if (i == size() - 1)
           return LazyPStackX.fromPStack(this, toPStack()).dropRight(1);
        
        return LazyPStackX.fromPStack(this, toPStack())
                          .zipWithIndex()
                          .filter(t->t.v2.intValue()!=i)
                          .map(t->t.v1);
      
    }

    @Override
    public DexxPStack<T> subList(int start, int end) {

        return withList(list.drop(start)
                            .take(end - start));
    }

    @Override
    public T get(int index) {
        return list.get(index);
    }

    @Override
    public int size() {
        return list.size();
    }

    @Override
    public DexxPStack<T> subList(int start) {
        return withList(list.drop(start));
    }

}
