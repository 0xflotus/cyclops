package cyclops.companion.functionaljava;

import cyclops.monads.FJWitness.list;
import com.aol.cyclops.functionaljava.hkt.ListKind;
import com.aol.cyclops2.hkt.Higher;
import com.aol.cyclops2.types.anyM.AnyMSeq;
import cyclops.collections.ListX;
import cyclops.function.Fn3;
import cyclops.function.Fn4;
import cyclops.function.Monoid;
import cyclops.monads.AnyM;
import cyclops.stream.ReactiveSeq;
import cyclops.typeclasses.Pure;
import cyclops.typeclasses.foldable.Foldable;
import cyclops.typeclasses.functor.Functor;
import cyclops.typeclasses.instances.General;
import cyclops.typeclasses.monad.*;

import fj.data.List;
import lombok.experimental.UtilityClass;

import java.util.function.*;


public class Lists {
   
    public static <T> AnyMSeq<list,T> anyM(List<T> option) {
        return AnyM.ofSeq(option, list.INSTANCE);
    }
    /**
     * Perform a For Comprehension over a List, accepting 3 generating functions.
     * This results in a four level nested internal iteration over the provided Publishers.
     *
     *  <pre>
     * {@code
     *
     *   import static cyclops.Lists.forEach4;
     *
    forEach4(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    (a,b,c) -> List.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param value4 Nested List
     * @param yieldingFunction  Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> List<R> forEach4(List<? extends T1> value1,
                                                               Function<? super T1, ? extends List<R1>> value2,
                                                               BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                               Fn3<? super T1, ? super R1, ? super R2, ? extends List<R3>> value4,
                                                               Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.bind(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.bind(inb -> {
                    List<R3> c = value4.apply(in,ina,inb);
                    return c.map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

    /**
     * Perform a For Comprehension over a List, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     *  import static com.aol.cyclops2.reactor.Listes.forEach4;
     *
     *  forEach4(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>just(a+b),
    (a,b,c) -> List.<Integer>just(a+b+c),
    (a,b,c,d) -> a+b+c+d <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param value4 Nested List
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> List<R> forEach4(List<? extends T1> value1,
                                                                 Function<? super T1, ? extends List<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                                 Fn3<? super T1, ? super R1, ? super R2, ? extends List<R3>> value4,
                                                                 Fn4<? super T1, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
                                                                 Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.bind(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.bind(inb -> {
                    List<R3> c = value4.apply(in,ina,inb);
                    return c.filter(in2->filterFunction.apply(in,ina,inb,in2))
                            .map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });
    }

    /**
     * Perform a For Comprehension over a List, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     * import static Lists.forEach3;
     *
     * forEach(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param yieldingFunction Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> List<R> forEach3(List<? extends T1> value1,
                                                         Function<? super T1, ? extends List<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                         Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.bind(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.map(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });


    }

    /**
     * Perform a For Comprehension over a List, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     * import static Lists.forEach;
     *
     * forEach(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    (a,b,c) ->a+b+c<10,
    Tuple::tuple)
    .toListX();
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param value3 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T1, T2, R1, R2, R> List<R> forEach3(List<? extends T1> value1,
                                                         Function<? super T1, ? extends List<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                         Fn3<? super T1, ? super R1, ? super R2, Boolean> filterFunction,
                                                         Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.bind(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.filter(in2->filterFunction.apply(in,ina,in2))
                        .map(in2 -> yieldingFunction.apply(in, ina, in2));
            });



        });
    }

    /**
     * Perform a For Comprehension over a List, accepting an additonal generating function.
     * This results in a two level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     *  import static Lists.forEach2;
     *  forEach(IntList.range(1, 10).boxed(),
     *          i -> List.range(i, 10), Tuple::tuple)
    .forEach(System.out::println);

    //(1, 1)
    (1, 2)
    (1, 3)
    (1, 4)
    ...
     *
     * }</pre>
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> List<R> forEach2(List<? extends T> value1,
                                                Function<? super T, List<R1>> value2,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.map(in2 -> yieldingFunction.apply(in,  in2));
        });

    }

    /**
     *
     * <pre>
     * {@code
     *
     *   import static Lists.forEach2;
     *
     *   forEach(IntList.range(1, 10).boxed(),
     *           i -> List.range(i, 10),
     *           (a,b) -> a>2 && b<10,
     *           Tuple::tuple)
    .forEach(System.out::println);

    //(3, 3)
    (3, 4)
    (3, 5)
    (3, 6)
    (3, 7)
    (3, 8)
    (3, 9)
    ...

     *
     * }</pre>
     *
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> List<R> forEach2(List<? extends T> value1,
                                                Function<? super T, ? extends List<R1>> value2,
                                                BiFunction<? super T, ? super R1, Boolean> filterFunction,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            List<R1> a = value2.apply(in);
            return a.filter(in2->filterFunction.apply(in,in2))
                    .map(in2 -> yieldingFunction.apply(in,  in2));
        });
    }
    /**
     * Companion class for creating Type Class instances for working with Lists
     * @author johnmcclean
     *
     */
    @UtilityClass
    public static class Instances {


        /**
         *
         * Transform a list, mulitplying every element by 2
         *
         * <pre>
         * {@code
         *  ListKind<Integer> list = Lists.functor().map(i->i*2, ListKind.widen(Arrays.asList(1,2,3));
         *
         *  //[2,4,6]
         *
         *
         * }
         * </pre>
         *
         * An example fluent api working with Lists
         * <pre>
         * {@code
         *   ListKind<Integer> list = Lists.unit()
        .unit("hello")
        .then(h->Lists.functor().map((String v) ->v.length(), h))
        .convert(ListKind::narrowK);
         *
         * }
         * </pre>
         *
         *
         * @return A functor for Lists
         */
        public static <T,R>Functor<ListKind.µ> functor(){
            BiFunction<ListKind<T>,Function<? super T, ? extends R>,ListKind<R>> map = Instances::map;
            return General.functor(map);
        }
        /**
         * <pre>
         * {@code
         * ListKind<String> list = Lists.unit()
        .unit("hello")
        .convert(ListKind::narrowK);

        //Arrays.asList("hello"))
         *
         * }
         * </pre>
         *
         *
         * @return A factory for Lists
         */
        public static <T> Pure<ListKind.µ> unit(){
            return General.<ListKind.µ,T>unit(Instances::of);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.ListKind.widen;
         * import static com.aol.cyclops.util.function.Lambda.l1;
         * import static java.util.Arrays.asList;
         *
        Lists.zippingApplicative()
        .ap(widen(asList(l1(this::multiplyByTwo))),widen(asList(1,2,3)));
         *
         * //[2,4,6]
         * }
         * </pre>
         *
         *
         * Example fluent API
         * <pre>
         * {@code
         * ListKind<Function<Integer,Integer>> listFn =Lists.unit()
         *                                                  .unit(Lambda.l1((Integer i) ->i*2))
         *                                                  .convert(ListKind::narrowK);

        ListKind<Integer> list = Lists.unit()
        .unit("hello")
        .then(h->Lists.functor().map((String v) ->v.length(), h))
        .then(h->Lists.zippingApplicative().ap(listFn, h))
        .convert(ListKind::narrowK);

        //Arrays.asList("hello".length()*2))
         *
         * }
         * </pre>
         *
         *
         * @return A zipper for Lists
         */
        public static <T,R> Applicative<ListKind.µ> zippingApplicative(){
            BiFunction<ListKind< Function<T, R>>,ListKind<T>,ListKind<R>> ap = Instances::ap;
            return General.applicative(functor(), unit(), ap);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.ListKind.widen;
         * ListKind<Integer> list  = Lists.monad()
        .flatMap(i->widen(ListX.range(0,i)), widen(Arrays.asList(1,2,3)))
        .convert(ListKind::narrowK);
         * }
         * </pre>
         *
         * Example fluent API
         * <pre>
         * {@code
         *    ListKind<Integer> list = Lists.unit()
        .unit("hello")
        .then(h->Lists.monad().flatMap((String v) ->Lists.unit().unit(v.length()), h))
        .convert(ListKind::narrowK);

        //Arrays.asList("hello".length())
         *
         * }
         * </pre>
         *
         * @return Type class with monad functions for Lists
         */
        public static <T,R> Monad<ListKind.µ> monad(){

            BiFunction<Higher<ListKind.µ,T>,Function<? super T, ? extends Higher<ListKind.µ,R>>,Higher<ListKind.µ,R>> flatMap = Instances::flatMap;
            return General.monad(zippingApplicative(), flatMap);
        }
        /**
         *
         * <pre>
         * {@code
         *  ListKind<String> list = Lists.unit()
        .unit("hello")
        .then(h->Lists.monadZero().filter((String t)->t.startsWith("he"), h))
        .convert(ListKind::narrowK);

        //Arrays.asList("hello"));
         *
         * }
         * </pre>
         *
         *
         * @return A filterable monad (with default value)
         */
        public static <T,R> MonadZero<ListKind.µ> monadZero(){

            return General.monadZero(monad(), ListKind.widen(List.list()));
        }
        /**
         * <pre>
         * {@code
         *  ListKind<Integer> list = Lists.<Integer>monadPlus()
        .plus(ListKind.widen(Arrays.asList()), ListKind.widen(Arrays.asList(10)))
        .convert(ListKind::narrowK);
        //Arrays.asList(10))
         *
         * }
         * </pre>
         * @return Type class for combining Lists by concatenation
         */
        public static <T> MonadPlus<ListKind.µ> monadPlus(){
            Monoid<ListKind<T>> m = Monoid.of(ListKind.widen(List.list()), Instances::concat);
            Monoid<Higher<ListKind.µ,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }
        /**
         *
         * <pre>
         * {@code
         *  Monoid<ListKind<Integer>> m = Monoid.of(ListKind.widen(Arrays.asList()), (a,b)->a.isEmpty() ? b : a);
        ListKind<Integer> list = Lists.<Integer>monadPlus(m)
        .plus(ListKind.widen(Arrays.asList(5)), ListKind.widen(Arrays.asList(10)))
        .convert(ListKind::narrowK);
        //Arrays.asList(5))
         *
         * }
         * </pre>
         *
         * @param m Monoid to use for combining Lists
         * @return Type class for combining Lists
         */
        public static <T> MonadPlus<ListKind.µ> monadPlus(Monoid<ListKind<T>> m){
            Monoid<Higher<ListKind.µ,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }

        /**
         * @return Type class for traversables with traverse / sequence operations
         */
        public static <C2,T> Traverse<ListKind.µ> traverse(){

            BiFunction<Applicative<C2>,ListKind<Higher<C2, T>>,Higher<C2, ListKind<T>>> sequenceFn = (ap, list) -> {

                Higher<C2,ListKind<T>> identity = ap.unit(ListKind.widen(List.list()));

                BiFunction<Higher<C2,ListKind<T>>,Higher<C2,T>,Higher<C2,ListKind<T>>> combineToList =
                        (acc,next) -> ap.apBiFn(ap.unit((a,b) -> ListKind.widen(ListKind.narrow(a).cons(b))), acc,next);

                BinaryOperator<Higher<C2,ListKind<T>>> combineLists = (a, b)-> ap.apBiFn(ap.unit((l1, l2)-> ListKind.widen(ListKind.narrow(l1).append(ListKind.narrow(l2)))),a,b); ;

                return ReactiveSeq.fromIterable(ListKind.narrow(list))
                        .reduce(identity,
                                combineToList,
                                combineLists);


            };
            BiFunction<Applicative<C2>,Higher<ListKind.µ,Higher<C2, T>>,Higher<C2, Higher<ListKind.µ,T>>> sequenceNarrow  =
                    (a,b) -> ListKind.widen2(sequenceFn.apply(a, ListKind.narrowK(b)));
            return General.traverse(zippingApplicative(), sequenceNarrow);
        }


        /**
         *
         * <pre>
         * {@code
         * int sum  = Lists.foldable()
        .foldLeft(0, (a,b)->a+b, ListKind.widen(Arrays.asList(1,2,3,4)));

        //10
         *
         * }
         * </pre>
         *
         *
         * @return Type class for folding / reduction operations
         */
        public static <T> Foldable<ListKind.µ> foldable(){
            BiFunction<Monoid<T>,Higher<ListKind.µ,T>,T> foldRightFn =  (m, l)-> ListX.fromIterable(ListKind.narrow(l)).foldRight(m);
            BiFunction<Monoid<T>,Higher<ListKind.µ,T>,T> foldLeftFn = (m, l)-> ListX.fromIterable(ListKind.narrow(l)).reduce(m);
            return General.foldable(foldRightFn, foldLeftFn);
        }

        private static  <T> ListKind<T> concat(ListKind<T> l1, ListKind<T> l2){
            return ListKind.widen(l1.append(ListKind.narrow(l2)));

        }
        private <T> ListKind<T> of(T value){
            return ListKind.widen(List.list(value));
        }
        private static <T,R> ListKind<R> ap(ListKind<Function< T, R>> lt, ListKind<T> list){

            return ListKind.widen(lt.zipWith(list.narrow(),(a, b)->a.apply(b)));
        }
        private static <T,R> Higher<ListKind.µ,R> flatMap(Higher<ListKind.µ,T> lt, Function<? super T, ? extends  Higher<ListKind.µ,R>> fn){
            return ListKind.widen(ListKind.narrow(lt).bind(in->fn.andThen(ListKind::narrow).apply(in)));
        }
        private static <T,R> ListKind<R> map(ListKind<T> lt, Function<? super T, ? extends R> fn){
            return ListKind.widen(ListKind.narrow(lt).map(in->fn.apply(in)));
        }
    }


}
