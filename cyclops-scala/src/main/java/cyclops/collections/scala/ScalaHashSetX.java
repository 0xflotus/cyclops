package cyclops.collections.scala;

import java.util.*;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.aol.cyclops.scala.collections.HasScalaCollection;
import com.aol.cyclops2.data.collections.extensions.CollectionX;
import com.aol.cyclops2.data.collections.extensions.lazy.immutable.LazyPSetX;
import com.aol.cyclops2.types.Unwrapable;
import cyclops.collections.immutable.OrderedSetX;
import cyclops.collections.immutable.PersistentSetX;
import cyclops.function.Reducer;
import cyclops.stream.ReactiveSeq;
import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.PSet;



import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import scala.collection.GenTraversableOnce;
import scala.collection.JavaConversions;
import scala.collection.generic.CanBuildFrom;
import scala.collection.immutable.HashSet;
import scala.collection.immutable.HashSet$;
import scala.collection.mutable.Builder;


@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ScalaHashSetX<T> extends AbstractSet<T>implements PSet<T>, HasScalaCollection<T>, Unwrapable {

    @Override
    public <R> R unwrap() {
        return (R)set;
    }

    public LazyPSetX<T> plusLoop(int max, IntFunction<T> value) {
        HashSet<T> toUse = set;
        for (int i = 0; i < max; i++) {
            toUse = toUse.$plus(value.apply(i));
        }
        return lazySet(toUse);

    }

    public LazyPSetX<T> plusLoop(Supplier<Optional<T>> supplier) {
        HashSet<T> toUse = set;
        Optional<T> next = supplier.get();
        while (next.isPresent()) {
            toUse = toUse.$plus(next.get());
            next = supplier.get();
        }
        return lazySet(toUse);
    }
    /**
     * Create a LazyPSetX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPSetX
     */
    public static <T> LazyPSetX<T> fromStream(Stream<T> stream) {
        return new LazyPSetX<T>(null, ReactiveSeq.fromStream(stream), toPSet());
    }

    /**
     * Create a LazyPSetX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPSetX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a SetX
     * 
     * <pre>
     * {@code 
     *  LazyPSetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    public static <U, T> LazyPSetX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPSetX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T> LazyPSetX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPSetX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T> LazyPSetX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PSet<Integer> q = JSPSet.<Integer>toPSet()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PSet
     */
    public static <T> Reducer<PSet<T>> toPSet() {
        return Reducer.<PSet<T>> of(ScalaHashSetX.emptyPSet(), (final PSet<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> ScalaHashSetX.singleton(x));
    }
    public static <T> LazyPSetX<T> lazySet(HashSet<T> set){
        return fromPSet(fromSet(set), toPSet());
    }

    private static <T> LazyPSetX<T> fromPSet(PSet<T> ts, Reducer<PSet<T>> pSetReducer) {
        return new LazyPSetX<T>(ts,null,pSetReducer);
    }

    public static <T> ScalaHashSetX<T> fromSet(HashSet<T> set) {
        return new ScalaHashSetX<>(
                                 set);
    }

    public static <T> ScalaHashSetX<T> emptyPSet() {
  
        return new ScalaHashSetX<>(
                                 HashSet$.MODULE$.empty());
    }

    public static <T> LazyPSetX<T> empty() {
        
        HashSet<T> empty = HashSet$.MODULE$.empty();
        return fromPSet(new ScalaHashSetX<T>(
                                                        empty),toPSet());
    }

    public static <T> LazyPSetX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyPSetX<T> of(T... t) {

         Builder<T, HashSet> lb = HashSet$.MODULE$.newBuilder();
        for (T next : t)
            lb.$plus$eq(next);
        HashSet<T> vec = lb.result();
        return fromPSet(new ScalaHashSetX<>(
                                                        vec),
                                      toPSet());
    }

    public static <T> LazyPSetX<T> PSet(HashSet<T> q) {
        return fromPSet(new ScalaHashSetX<T>(
                                                         q),
                                      toPSet());
    }

    @SafeVarargs
    public static <T> LazyPSetX<T> PSet(T... elements) {
        return fromPSet(of(elements), toPSet());
    }

    @Wither
    private final HashSet<T> set;

    @Override
    public ScalaHashSetX<T> plus(T e) {
       
        return withSet(set.$plus(e));
    }

    @Override
    public ScalaHashSetX<T> plusAll(Collection<? extends T> l) {
       
        HashSet<T> res = HasScalaCollection.<T,HashSet<T>>visit(HasScalaCollection.narrow(l), scala->
            (HashSet<T>) set.$plus$plus(scala.traversable(),  scala.canBuildFrom())
        , java->{
            HashSet<T> vec = set;
            for (T next : l) {
                vec = vec.$plus(next);
          }
            return vec;
        });

        return withSet(res);
       
    }

   

    
  

    @Override
    public PSet<T> minus(Object e) {
        return withSet(set.$minus((T)e));
        
    }

    @Override
    public PSet<T> minusAll(Collection<?> s) {
        GenTraversableOnce<T> col = HasScalaCollection.<T>traversable((Collection)s);
        return withSet((HashSet)set.$minus$minus(col));        
    }

  
   

    @Override
    public int size() {
        return set.size();
    }

    @Override
    public Iterator<T> iterator() {
        return JavaConversions.asJavaIterator(set.iterator());
    }

    @Override
    public GenTraversableOnce<T> traversable() {
       return set;
    }

    @Override
    public CanBuildFrom canBuildFrom() {
       return HashSet.canBuildFrom();
      
    }


    public static <T> PersistentSetX<T> copyFromCollection(CollectionX<? extends T> vec, Comparator<T> comp) {
        PersistentSetX<T> res = ScalaHashSetX.<T>empty()
                                          .plusAll(vec);
        return res;
    }
}
