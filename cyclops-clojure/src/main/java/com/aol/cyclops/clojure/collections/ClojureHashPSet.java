package com.aol.cyclops.clojure.collections;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.PSet;

import com.aol.cyclops.Reducer;
import com.aol.cyclops.control.ReactiveSeq;
import com.aol.cyclops.reactor.collections.extensions.persistent.LazyPSetX;

import clojure.lang.IPersistentSet;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import reactor.core.publisher.Flux;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ClojureHashPSet<T> extends AbstractSet<T>implements PSet<T> {

    /**
     * Create a LazyPSetX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPSetX
     */
    public static <T> LazyPSetX<T> fromStream(Stream<T> stream) {
        return new LazyPSetX<T>(
                                Flux.from(ReactiveSeq.fromStream(stream)), toPSet());
    }

    /**
     * Create a LazyPSetX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPSetX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a SetX
     * 
     * <pre>
     * {@code 
     *  LazyPSetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    public static <U, T> LazyPSetX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPSetX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T> LazyPSetX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPSetX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T> LazyPSetX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PSet<Integer> q = JSPSet.<Integer>toPSet()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PSet
     */
    public static <T> Reducer<PSet<T>> toPSet() {
        return Reducer.<PSet<T>> of(ClojureHashPSet.emptyPSet(), (final PSet<T> a) -> b -> a.plusAll(b),
                                    (final T x) -> ClojureHashPSet.singleton(x));
    }

    public static <T> ClojureHashPSet<T> fromSet(PersistentHashSet set) {
        return new ClojureHashPSet<>(
                                     set);
    }

    public static <T> ClojureHashPSet<T> emptyPSet() {

        return new ClojureHashPSet<>(
                                     PersistentHashSet.EMPTY);
    }

    public static <T> LazyPSetX<T> empty() {

        return LazyPSetX.fromPSet(new ClojureHashPSet<T>(
                                                         PersistentHashSet.EMPTY),
                                  toPSet());
    }

    public static <T> LazyPSetX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyPSetX<T> of(T... t) {

        return LazyPSetX.fromPSet(new ClojureHashPSet<>(
                                                        PersistentHashSet.create(t)),
                                  toPSet());
    }

    public static <T> LazyPSetX<T> PSet(PersistentHashSet q) {
        return LazyPSetX.fromPSet(new ClojureHashPSet<T>(
                                                         q),
                                  toPSet());
    }

    @SafeVarargs
    public static <T> LazyPSetX<T> PSet(T... elements) {
        return LazyPSetX.fromPSet(of(elements), toPSet());
    }

    @Wither
    private final PersistentHashSet set;

    @Override
    public ClojureHashPSet<T> plus(T e) {

        return withSet((PersistentHashSet) set.cons(e));
    }

    @Override
    public ClojureHashPSet<T> plusAll(Collection<? extends T> l) {

        PersistentHashSet use = set;
        for (T next : l)
            use = (PersistentHashSet) use.cons(next);
        return withSet(use);

    }

    @Override
    public PSet<T> minus(Object e) {
        return withSet((PersistentHashSet) set.disjoin(e));

    }

    @Override
    public PSet<T> minusAll(Collection<?> s) {
        PersistentHashSet use = set;
        for (Object next : s)
            use = (PersistentHashSet) use.disjoin(next);
        return withSet(use);
    }

    @Override
    public int size() {
        return set.count();
    }

    @Override
    public Iterator<T> iterator() {
        return set.iterator();
    }

}
