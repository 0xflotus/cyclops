package com.aol.cyclops.reactor;

import java.util.Iterator;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.reactivestreams.Publisher;

import com.aol.cyclops.control.AnyM;
import com.aol.cyclops.control.For;
import com.aol.cyclops.control.FutureW;
import com.aol.cyclops.types.Value;
import com.aol.cyclops.types.anyM.AnyMValue;
import com.aol.cyclops.types.stream.reactive.ValueSubscriber;
import com.aol.cyclops.util.function.QuadFunction;
import com.aol.cyclops.util.function.TriFunction;

import lombok.experimental.UtilityClass;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Companion class for working with Reactor Mono types
 * 
 * @author johnmcclean
 *
 */
@UtilityClass
public class Monos {

    /**
     * Construct an AnyM type from a Mono. This allows the Mono to be manipulated according to a standard interface
     * along with a vast array of other Java Monad implementations
     * 
     * <pre>
     * {@code 
     *    
     *    AnyMSeq<Integer> mono = Fluxes.anyM(Mono.just(1,2,3));
     *    AnyMSeq<Integer> transformedMono = myGenericOperation(mono);
     *    
     *    public AnyMSeq<Integer> myGenericOperation(AnyMSeq<Integer> monad);
     * }
     * </pre>
     * 
     * @param mono To wrap inside an AnyM
     * @return AnyMSeq wrapping a Mono
     */
    public static <T> AnyMValue<T> mono(Mono<T> mono) {
        return AnyM.ofValue(mono);
    }

    /**
     * Perform a For Comprehension over a Mono, accepting 3 generating functions. 
     * This results in a four level nested internal iteration over the provided Monos.
     * 
     *  <pre>
     * {@code
     *    
     *   import static com.aol.cyclops.reactor.Monos.forEach;
     *    
          forEach(Mono.just(1), 
                  a-> Mono.just(a+1),
                  (a,b) -> Mono.<Integer>just(a+b),
                  (a,b,c) -> Mono.<Integer>just(a+b+c),
                  Tuple::tuple)
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param value3 Nested Mono
     * @param value4 Nested Mono
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> Mono<R> forEach(Mono<? extends T1> value1,
            Function<? super T1, ? extends Mono<R1>> value2,
            BiFunction<? super T1, ? super R1, ? extends Mono<R2>> value3,
            TriFunction<? super T1, ? super R1, ? super R2, ? extends Mono<R3>> value4,
            QuadFunction<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .anyM(a -> b -> mono(value3.apply(a, b)))
                               .anyM(a -> b -> c -> mono(value4.apply(a, b, c)))
                               .yield4(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * 
     * Perform a For Comprehension over a Mono, accepting 3 generating functions. 
     * This results in a four level nested internal iteration over the provided Monos.
     * 
     * <pre>
     * {@code
     * 
     *  import static com.aol.cyclops.reactor.Monos.forEach;
     *   
     *  forEach(Mono.just(1), 
                a-> Mono.just(a+1),
                (a,b) -> Mono.<Integer>just(a+b),
                (a,b,c) -> Mono.<Integer>just(a+b+c),
                (a,b,c,d) -> a+b+c+d <100,
                Tuple::tuple);
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param value3 Nested Mono
     * @param value4 Nested Mono
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> Mono<R> forEach(Mono<? extends T1> value1,
            Function<? super T1, ? extends Mono<R1>> value2,
            BiFunction<? super T1, ? super R1, ? extends Mono<R2>> value3,
            TriFunction<? super T1, ? super R1, ? super R2, ? extends Mono<R3>> value4,
            QuadFunction<? super T1, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
            QuadFunction<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .anyM(a -> b -> mono(value3.apply(a, b)))
                               .anyM(a -> b -> c -> mono(value4.apply(a, b, c)))
                               .filter(a -> b -> c -> d -> filterFunction.apply(a, b, c, d))
                               .yield4(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * Perform a For Comprehension over a Mono, accepting 2 generating functions. 
     * This results in a three level nested internal iteration over the provided Monos.
     * 
     *  <pre>
     * {@code
     *    
     *   import static com.aol.cyclops.reactor.Monos.forEach;
     *    
          forEach(Mono.just(1), 
                  a-> Mono.just(a+1),
                  (a,b) -> Mono.<Integer>just(a+b),
                  Tuple::tuple)
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param value3 Nested Mono
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> Mono<R> forEach(Mono<? extends T1> value1,
            Function<? super T1, ? extends Mono<R1>> value2,
            BiFunction<? super T1, ? super R1, ? extends Mono<R2>> value3,
            TriFunction<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .anyM(a -> b -> mono(value3.apply(a, b)))
                               .yield3(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * 
     * Perform a For Comprehension over a Mono, accepting 2 generating functions. 
     * This results in a three level nested internal iteration over the provided Monos.
     * 
     * <pre>
     * {@code
     * 
     *  import static com.aol.cyclops.reactor.Monos.forEach;
     *   
     *  forEach(Mono.just(1), 
                a-> Mono.just(a+1),
                (a,b) -> Mono.<Integer>just(a+b),
                (a,b,c) -> a+b+c <100,
                Tuple::tuple);
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param value3 Nested Mono
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> Mono<R> forEach(Mono<? extends T1> value1,
            Function<? super T1, ? extends Mono<R1>> value2,
            BiFunction<? super T1, ? super R1, ? extends Mono<R2>> value3,
            TriFunction<? super T1, ? super R1, ? super R2, Boolean> filterFunction,
            TriFunction<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .anyM(a -> b -> mono(value3.apply(a, b)))
                               .filter(a -> b -> c -> filterFunction.apply(a, b, c))
                               .yield3(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * Perform a For Comprehension over a Mono, accepting a generating function. 
     * This results in a two level nested internal iteration over the provided Monos.
     * 
     *  <pre>
     * {@code
     *    
     *   import static com.aol.cyclops.reactor.Monos.forEach;
     *    
          forEach(Mono.just(1), 
                  a-> Mono.just(a+1),
                  Tuple::tuple)
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T, R1, R> Mono<R> forEach(Mono<? extends T> value1, Function<? super T, Mono<R1>> value2,
            BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .yield2(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * 
     * Perform a For Comprehension over a Mono, accepting a generating functions. 
     * This results in a two level nested internal iteration over the provided Monos.
     * 
     * <pre>
     * {@code
     * 
     *  import static com.aol.cyclops.reactor.Monos.forEach;
     *   
     *  forEach(Mono.just(1), 
                a-> Mono.just(a+1),
                (a,b) -> Mono.<Integer>just(a+b),
                (a,b,c) -> a+b+c <100,
                Tuple::tuple);
     * 
     * }
     * </pre>
     * 
     * @param value1 top level Mono
     * @param value2 Nested Mono
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Mono with a combined value generated by the yielding function
     */
    public static <T, R1, R> Mono<R> forEach(Mono<? extends T> value1, Function<? super T, ? extends Mono<R1>> value2,
            BiFunction<? super T, ? super R1, Boolean> filterFunction,
            BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return AnyM.ofValue(For.anyM(mono(value1))
                               .anyM(a -> mono(value2.apply(a)))
                               .filter(a -> b -> filterFunction.apply(a, b))
                               .yield2(yieldingFunction)
                               .unwrap())
                   .unwrap();

    }

    /**
     * Lazily combine this Mono with the supplied value via the supplied BiFunction
     * 
     * @param mono Mono to combine with another value
     * @param app Value to combine with supplied mono
     * @param fn Combiner function
     * @return Combined Mono
     */
    public static <T1, T2, R> Mono<R> combine(Mono<? extends T1> mono, Value<? extends T2> app,
            BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return Mono.from(FutureW.of(mono.toFuture())
                                .combine(app, fn));
    }

    /**
     * Lazily combine this Mono with the supplied Mono via the supplied BiFunction
     * 
     * @param mono Mono to combine with another value
     * @param app Mono to combine with supplied mono
     * @param fn Combiner function
     * @return Combined Mono
     */
    public static <T1, T2, R> Mono<R> combine(Mono<? extends T1> mono, Mono<? extends T2> app,
            BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return Mono.from(FutureW.of(mono.toFuture())
                                .combine(FutureW.of(app.toFuture()), fn));
    }

    /**
     * Combine the provided Mono with the first element (if present) in the provided Iterable using the provided BiFunction
     * 
     * @param mono Mono to combine with an Iterable
     * @param app Iterable to combine with a Mono
     * @param fn Combining function
     * @return Combined Mono
     */
    public static <T1, T2, R> Mono<R> zip(Mono<? extends T1> mono, Iterable<? extends T2> app,
            BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return Mono.from(FutureW.of(mono.toFuture())
                                .zip(app, fn));
    }

    /**
     * Combine the provided Mono with the first element (if present) in the provided Publisher using the provided BiFunction
     * 
     * @param mono  Mono to combine with a Publisher
     * @param fn Publisher to combine with a Mono
     * @param app Combining function
     * @return Combined Mono
     */
    public static <T1, T2, R> Mono<R> zip(Mono<? extends T1> mono, BiFunction<? super T1, ? super T2, ? extends R> fn,
            Publisher<? extends T2> app) {
        return Mono.from(FutureW.of(mono.toFuture())
                                .zip(fn, app));
    }

    /**
     * Test if value is equal to the value inside this Mono
     * 
     * @param mono Mono to test
     * @param test Value to test
     * @return true if equal
     */
    public static <T> boolean test(Mono<T> mono, T test) {
        return FutureW.of(mono.toFuture())
                      .test(test);
    }

    /**
     * Construct a Mono from Iterable by taking the first value from Iterable
     * 
     * @param t Iterable to populate Mono from
     * @return Mono containing first element from Iterable (or empty Mono)
     */
    public static <T> Mono<T> fromIterable(Iterable<T> t) {
        return Mono.from(Flux.fromIterable(t));
    }

    /**
     * Get an Iterator for the value (if any) in the provided Mono
     * 
     * @param pub Mono to get Iterator for
     * @return Iterator over Mono value
     */
    public static <T> Iterator<T> iterator(Mono<T> pub) {

        ValueSubscriber<T> sub = ValueSubscriber.subscriber();
        pub.subscribe(sub);
        return sub.iterator();
    }
}
