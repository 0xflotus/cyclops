package com.aol.cyclops.javaslang.collections;

import java.util.AbstractList;
import java.util.Collection;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.aol.cyclops2.data.collections.extensions.lazy.immutable.LazyPStackX;
import cyclops.function.Reducer;
import cyclops.stream.ReactiveSeq;
import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.PStack;
import org.pcollections.PStack;


import javaslang.collection.List;
import javaslang.collection.Set;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import reactor.core.publisher.Flux;
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class JavaSlangPStack<T> extends AbstractList<T> implements PStack<T> {
    
    /**
     * Create a LazyPStackX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPStackX
     */
    public static <T> LazyPStackX<T> fromStream(Stream<T> stream) {
        Reducer<PStack<T>> p = toPStack();
        return new LazyPStackX<T>(null, ReactiveSeq.fromStream(stream),true,p);
    }

    /**
     * Create a LazyPStackX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPStackX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a ListX
     * 
     * <pre>
     * {@code 
     *  LazyPStackX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return ListX generated by unfolder function
     */
    public static <U, T> LazyPStackX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPStackX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate ListX elements
     * @return ListX generated from the provided Supplier
     */
    public static <T> LazyPStackX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                      .limit(limit));
    }

    /**
     * Create a LazyPStackX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return ListX generated by iterative application
     */
    public static <T> LazyPStackX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                      .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PStack<Integer> q = JSPStack.<Integer>toPStack()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PStack
     */
    public static <T> Reducer<PStack<T>> toPStack() {
        return Reducer.<PStack<T>> of(JavaSlangPStack.emptyPStack(), (final PStack<T> a) -> b -> a.plusAll(b), (final T x) -> JavaSlangPStack.singleton(x));
    }
    
    public static <T> JavaSlangPStack<T> emptyPStack(){
        return new JavaSlangPStack<T>(List.empty());
    }
    public static <T> LazyPStackX<T> empty(){
        return fromPStack(new JavaSlangPStack<T>(List.empty()), toPStack());
    }
    private static <T> LazyPStackX<T> fromPStack(PStack<T> s, Reducer<PStack<T>> pStackReducer) {
        return new LazyPStackX<T>(s,null,true, pStackReducer);
    }
    public static <T> LazyPStackX<T> singleton(T t){
        return fromPStack(new JavaSlangPStack<T>(List.of(t)), toPStack());
    }
    public static <T> LazyPStackX<T> of(T... t){
        return fromPStack(new JavaSlangPStack<T>(List.of(t)), toPStack());
    }
    public static <T> LazyPStackX<T> PStack(List<T> q) {
        return fromPStack(new JavaSlangPStack<>(q), toPStack());
    }
    @SafeVarargs
    public static <T> LazyPStackX<T> PStack(T... elements){
        return fromPStack(of(elements),toPStack());
    }
    @Wither
    private final List<T> list;

    @Override
    public PStack<T> plus(T e) {
        return withList(list.prepend(e));
    }

    @Override
    public PStack<T> plusAll(Collection<? extends T> l) {
        List<T> use = list;
        for(T next :  l)
            use = use.prepend(next);
        return withList(use);
    }

    @Override
    public PStack<T> with(int i, T e) {
        List<T> front = list.take(i);
        List<T> back = list.drop(i);
        
        return withList(back.prepend(e).prependAll(front));
    }

    @Override
    public PStack<T> plus(int i, T e) {
        return withList(list.insert(i,e));
    }

    @Override
    public PStack<T> plusAll(int i, Collection<? extends T> l) {
       //use same behaviour as pCollections
        List<T> use = list;
        for(T next :  l)
            use = use.insert(i,next);
        return withList(use);
    }

    @Override
    public PStack<T> minus(Object e) {
        return withList(list.remove((T)e));
    }

    @Override
    public PStack<T> minusAll(Collection<?> l) {
        return withList(list.removeAll((Collection)l));
    }

    @Override
    public PStack<T> minus(int i) {
        return withList(list.removeAt(i));
    }

    @Override
    public PStack<T> subList(int start, int end) {
        return withList(list.subSequence(start, end));
    }

    @Override
    public T get(int index) {
        return list.get(index);
    }

    @Override
    public int size() {
        return list.size();
    }

    @Override
    public org.pcollections.PStack<T> subList(int start) {
       return withList(list.subSequence(start));
    }

   
}
