package com.aol.cyclops.dexx.collections;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.Iterator;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.aol.cyclops2.data.collections.extensions.lazy.immutable.LazyPSetX;
import cyclops.function.Reducer;
import cyclops.stream.ReactiveSeq;
import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.PSet;


import com.github.andrewoma.dexx.collection.Builder;
import com.github.andrewoma.dexx.collection.Set;
import com.github.andrewoma.dexx.collection.Sets;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import reactor.core.publisher.Flux;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class DexxPSet<T> extends AbstractSet<T>implements PSet<T> {

    /**
     * Create a LazyPSetX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPSetX
     */
    public static <T> LazyPSetX<T> fromStream(Stream<T> stream) {
        Reducer<PSet<T>> r = toPSet();
        return new LazyPSetX<T>(null, ReactiveSeq.fromStream(stream), r);
    }

    /**
     * Create a LazyPSetX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPSetX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPSetX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a SetX
     * 
     * <pre>
     * {@code 
     *  LazyPSetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    public static <U, T> LazyPSetX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPSetX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T> LazyPSetX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPSetX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T> LazyPSetX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PSet<Integer> q = JSPSet.<Integer>toPSet()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PSet
     */
    public static <T> Reducer<PSet<T>> toPSet() {
        return Reducer.<PSet<T>> of(DexxPSet.emptyPSet(), (final PSet<T> a) -> b -> a.plusAll(b),
                                    (final T x) -> DexxPSet.singleton(x));
    }

    public static <T> DexxPSet<T> fromSet(Set<T> set) {
        return new DexxPSet<>(
                              set);
    }

    public static <T> DexxPSet<T> emptyPSet() {

        return new DexxPSet<>(
                              Sets.of());
    }

    public static <T> LazyPSetX<T> empty() {

        return fromPSet(new DexxPSet<T>(
                                                  Sets.of()),
                                  toPSet());
    }
    private static <T> LazyPSetX<T> fromPSet(PSet<T> ts, Reducer<PSet<T>> pSetReducer) {
        return new LazyPSetX<T>(ts,null,pSetReducer);
    }

    public static <T> LazyPSetX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyPSetX<T> of(T... t) {

        Builder<T, Set<T>> lb = Sets.builder();
        for (T next : t)
            lb.add(next);
        Set<T> vec = lb.build();
        return fromPSet(new DexxPSet<>(
                                                 vec),
                                  toPSet());
    }

    public static <T> LazyPSetX<T> PSet(Set<T> q) {
        return fromPSet(new DexxPSet<T>(
                                                  q),
                                  toPSet());
    }

    @SafeVarargs
    public static <T> LazyPSetX<T> PSet(T... elements) {
        return fromPSet(of(elements), toPSet());
    }

    @Wither
    private final Set<T> set;

    @Override
    public DexxPSet<T> plus(T e) {
        return withSet(set.add(e));
    }

    @Override
    public DexxPSet<T> plusAll(Collection<? extends T> l) {

        Set<T> vec = set;
        for (T next : l) {
            vec = vec.add(next);
        }

        return withSet(vec);

    }

    @Override
    public PSet<T> minus(Object e) {
        return withSet(set.remove((T)e));

    }

    @Override
    public PSet<T> minusAll(Collection<?> s) {
        Set<T> vec = set;
        for (Object next : s) {
            
            vec = vec.remove((T)next);
        }

        return withSet(vec);
    }

    @Override
    public int size() {
        return set.size();
    }

    @Override
    public Iterator<T> iterator() {
        return set.iterator();
    }

}
