package cyclops.collections.clojure;

import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import clojure.lang.RT;
import com.oath.cyclops.data.collections.extensions.CollectionX;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.FoldToList;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.LazyLinkedListX;
import com.oath.cyclops.types.Unwrapable;
import com.oath.cyclops.types.foldable.Evaluation;
import cyclops.collections.immutable.LinkedListX;
import cyclops.collections.mutable.ListX;
import cyclops.control.Option;
import cyclops.data.Seq;
import cyclops.function.Reducer;
import cyclops.reactive.ReactiveSeq;
import cyclops.data.tuple.Tuple2;



import clojure.lang.IPersistentList;
import clojure.lang.PersistentList;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;


@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ClojureListX<T> implements com.oath.cyclops.types.persistent.PersistentList<T>, Unwrapable {

    static final FoldToList gen = (it, i)-> ClojureListX.from(from(it,i));

    public static <T> LinkedListX<T> listX(ReactiveSeq<T> stream){
        return fromStream(stream);
    }
    public static <T> LinkedListX<T> copyFromCollection(CollectionX<T> vec) {
        return fromPersistentList(new ClojureListX<T>(from(vec.iterator(),0)),toPersistentList());

    }
    public static <T> LazyLinkedListX<T> from(IPersistentList q) {
        return fromPersistentList(new ClojureListX<>(q), toPersistentList());
    }

    private static <E> IPersistentList from(final Iterator<E> i, int depth) {

        if(!i.hasNext())
            return PersistentList.create(Arrays.asList());
        E e = i.next();
        return  (IPersistentList) from(i,depth++).cons(e);
    }
    @Override
    public <R> R unwrap() {
        return (R)list;
    }
    /**
     * Create a LazyLinkedListX from a Stream
     *
     * @param stream to construct a LazyQueueX from
     * @return LazyLinkedListX
     */
    public static <T> LazyLinkedListX<T> fromStream(Stream<T> stream) {
        Reducer<com.oath.cyclops.types.persistent.PersistentList<T>,T> s = toPersistentList();
        return new LazyLinkedListX<T>(null,
                                  ReactiveSeq.fromStream(stream), s,gen, Evaluation.LAZY);
    }

    /**
     * Create a LazyLinkedListX that contains the Integers between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyLinkedListX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyLinkedListX that contains the Longs between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyLinkedListX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a ListX
     *
     * <pre>
     * {@code
     *  LazyLinkedListX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     *
     * //(1,2,3,4,5)
     *
     * }</pre>
     *
     * @param seed Initial value
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return ListX generated by unfolder function
     */
    public static <U, T> LazyLinkedListX<T> unfold(U seed, Function<? super U, Option<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyLinkedListX from the provided Supplier up to the provided limit number of times
     *
     * @param limit Max number of elements to generate
     * @param s Supplier to generate ListX elements
     * @return ListX generated from the provided Supplier
     */
    public static <T> LazyLinkedListX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyLinkedListX by iterative application of a function to an initial element up to the supplied limit number of times
     *
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return ListX generated by iterative application
     */
    public static <T> LazyLinkedListX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

  public static <T> Reducer<com.oath.cyclops.types.persistent.PersistentList<T>,T> toPersistentList() {
    return Reducer.<com.oath.cyclops.types.persistent.PersistentList<T>,T> of(ClojureListX.emptyPersistentList(),
      (final com.oath.cyclops.types.persistent.PersistentList<T> a) -> b -> b.plusAll(a), (final T x) -> ClojureListX.singleton(x));

  }

    public static <T> ClojureListX<T> fromList(List<T> list) {
        return new ClojureListX<T>(
                                    PersistentList.create(list));
    }

    public static <T> ClojureListX<T> emptyPersistentList() {

        return new ClojureListX<T>(
                                    PersistentList.create(Arrays.asList()));
    }

    public static <T> LazyLinkedListX<T> empty() {
        return of();
    }

    public static <T> LazyLinkedListX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyLinkedListX<T> of(T... t) {

        return fromPersistentList(new ClojureListX<T>(
                                                           PersistentList.create(Arrays.asList(t))),
                                      toPersistentList());
    }

    public static <T> LazyLinkedListX<T> PersistentList(List<T> q) {
        return fromPersistentList(new ClojureListX<T>(
                                                           PersistentList.create(q)),
                                      toPersistentList());
    }

    private static <T> LazyLinkedListX<T> fromPersistentList(com.oath.cyclops.types.persistent.PersistentList<T> s,
                                                             Reducer<com.oath.cyclops.types.persistent.PersistentList<T>,T> pStackReducer) {
        return new LazyLinkedListX<T>(s,null, pStackReducer, gen,Evaluation.LAZY);
    }

    @SafeVarargs
    public static <T> LazyLinkedListX<T> PersistentList(T... elements) {
        return fromPersistentList(of(elements), toPersistentList());
    }

    @Wither
    private final IPersistentList list;

    @Override
    public ClojureListX<T> plus(T e) {
        return withList((IPersistentList) list.cons(e));
    }

    @Override
    public ClojureListX<T> plusAll(Iterable<? extends T> l) {

        IPersistentList vec = list;
        for (T next : l) {
            vec = (IPersistentList) vec.cons(next);
        }

        return withList(vec);
    }

    @Override
    public ClojureListX<T> updateAt(int i, T e) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());

        PersistentList nel = (PersistentList) list;
        if (i == 0) {
            if (head().equals(e))
                return this;
            return withList((IPersistentList) tail().list.cons(e));

        }
        IPersistentList newRest = tail().updateAt(i - 1, e).list;

        if (newRest == nel.next())
            return this;
        return withList((IPersistentList) newRest.cons(head()));

    }

    @Override
    public ClojureListX<T> insertAt(int i, T e) {
        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException();

        if(size()==0){
            return withList((IPersistentList) PersistentList.create(Arrays.asList(e)));
        }
        if( tail().list==null){
            return withList((IPersistentList) PersistentList.create(Arrays.asList(e)).cons(head()));
        }
        if (i == 0) // insert at beginning
            return plus(e);
        return withList((IPersistentList) tail().insertAt(i - 1, e).list.cons(head()));

    }

    @Override
    public ClojureListX<T> insertAt(int i, Iterable<? extends T> l) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());

        if(size()==0){
            return withList((IPersistentList) PersistentList.create(ListX.fromIterable(l)));
        }
        if( tail().list==null){
            return withList((IPersistentList) PersistentList.create(ListX.fromIterable(l)).cons(head()));
        }
        if (i == 0 || tail().list==null)
            return plusAll(l);
        return withList((IPersistentList) tail().insertAt(i - 1, l).list.cons(head()));

    }



    @Override
    public ClojureListX<T> removeValue(T e) {
        if (size() == 0)
            return this;
        PersistentList nel = (PersistentList) list;
        if (head().equals(e)){

            IPersistentList res = (IPersistentList)nel.next();
            if(res==null)
                res = PersistentList.create(Arrays.asList());
            return withList(res);
        }

        IPersistentList newRest = tail().removeValue(e).list;

        if (newRest == ((PersistentList) list).next())
            return this;

        return withList((IPersistentList) newRest.cons(nel.first()));

    }

    @Override
    public ClojureListX<T> removeAll(Iterable<? extends T> l) {
      Collection<? extends T> c = l instanceof Collection ? (Collection<? extends T>)l : ListX.fromIterable(l);
        if (size() == 0)
            return this;
        PersistentList nel = (PersistentList) list;
        if (c.contains(head())){
            IPersistentList res1 = (IPersistentList)nel.next();
            if(res1==null)
                return withList(PersistentList.create(Arrays.asList()));
            return tail().removeAll(c);
        }


        IPersistentList newRest = tail().removeAll(c).list;
        if (newRest == nel.next())
            return this;
        return withList((IPersistentList) newRest.cons(nel.first()));
    }

    public ClojureListX<T> tail() {
        PersistentList nel = (PersistentList) list;
        return withList((IPersistentList) nel.next());
    }

    public T head() {
        PersistentList nel = (PersistentList) list;
        return (T) nel.first();
    }

    @Override
    public ClojureListX<T> removeAt(int i) {

      Option<T> o = get(i);
      return o.visit(s->removeValue(s),()->this);
    }


    public ClojureListX<T> subList(int start, int end) {

        if (start < 0 || end > size() || start > end)
            throw new IndexOutOfBoundsException(
                                                "Index  is out of bounds - size : " + size());
        if (end == size())
            return subList(start);
        if (start == end)
            return withList(PersistentList.EMPTY);
        if (start == 0) {
            return withList((IPersistentList) tail().subList(0, end - 1).list.cons(head()));
        }

        return tail().subList(start - 1, end - 1);
    }

    private final Object NOT_FOUND = new Object();
    @Override
    public Option<T> get(int index) {
        PersistentList nel = (PersistentList) list;

       Object res = RT.nth(nel,index,NOT_FOUND);
       if(res==NOT_FOUND)
          return Option.none();
       return Option.some((T)res);
    }
  @Override
  public T getOrElse(int index, T alt) {
    PersistentList nel = (PersistentList) list;

    return (T)RT.nth(nel,index,alt);

  }
  public T getOrElseGet(int index, Supplier<? extends T> alt){
      return getOrElse(index,alt.get());
  }

    @Override
    public int size() {
        if (list instanceof PersistentList) {

            PersistentList nel = (PersistentList) list;
            return nel.size();
        }
        return 0;
    }


    public ClojureListX<T> subList(int start) {
        return subList(start, size());
    }

  @Override
  public Iterator<T> iterator() {
    PersistentList nel = (PersistentList) list;
    return (Iterator<T>)nel.iterator();
  }
}
