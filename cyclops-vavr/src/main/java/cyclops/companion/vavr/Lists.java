package cyclops.companion.vavr;

import com.oath.cyclops.anym.AnyMSeq;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.LazyLinkedListX;
import cyclops.collections.vavr.VavrListX;
import cyclops.function.Function3;
import cyclops.function.Function4;
import cyclops.monads.AnyM;
import cyclops.monads.VavrWitness.list;
import cyclops.monads.WitnessType;
import cyclops.monads.XorM;
import cyclops.monads.transformers.ListT;
import io.vavr.collection.List;

import java.util.function.BiFunction;
import java.util.function.Function;



public class Lists {
    public static <T,W extends WitnessType<W>> ListT<W, T> liftM(List<T> opt, W witness) {
        AnyM<W, LazyLinkedListX<T>> x = witness.adapter().unit(VavrListX.ofAll(opt));
        return ListT.of(x);
    }
    public static  <W1 extends WitnessType<W1>,T> XorM<W1,list,T> xorM(List<T> type){
        return XorM.right(anyM(type));
    }
    public static  <W1 extends WitnessType<W1>,T> XorM<W1,list,T> xorM(T... values){
        return xorM(List.of(values));
    }

    public static <T> AnyMSeq<list,T> anyM(List<T> option) {
        return AnyM.ofSeq(option, list.INSTANCE);
    }

    public static  <T,R> List<R> tailRec(T initial, Function<? super T, ? extends List<? extends io.vavr.control.Either<T, R>>> fn) {
        List<io.vavr.control.Either<T, R>> next = List.of(io.vavr.control.Either.left(initial));

        boolean newValue[] = {true};
        for(;;){

            next = next.flatMap(e -> e.fold(s -> {
                        newValue[0]=true;
                        return fn.apply(s); },
                    p -> {
                        newValue[0]=false;
                        return List.of(e);
                    }));
            if(!newValue[0])
                break;

        }

        return next.filter(io.vavr.control.Either::isRight).map(io.vavr.control.Either::get);
    }
    public static  <T,R> List<R> tailRecEither(T initial, Function<? super T, ? extends List<? extends cyclops.control.Either<T, R>>> fn) {
        List<cyclops.control.Either<T, R>> next = List.of(cyclops.control.Either.left(initial));

        boolean newValue[] = {true};
        for(;;){

            next = next.flatMap(e -> e.visit(s -> {
                        newValue[0]=true;
                        return fn.apply(s); },
                    p -> {
                        newValue[0]=false;
                        return List.of(e);
                    }));
            if(!newValue[0])
                break;

        }

        return next.filter(cyclops.control.Either::isRight).map(e->e.orElse(null));
    }
    /**
     * Perform a For Comprehension over a List, accepting 3 generating functions.
     * This results in a four level nested internal iteration over the provided Publishers.
     *
     *  <pre>
     * {@code
     *
     *   import static cyclops.Lists.forEach4;
     *
    forEach4(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    (a,b,c) -> List.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param value4 Nested List
     * @param yieldingFunction  Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> List<R> forEach4(List<? extends T1> value1,
                                                               Function<? super T1, ? extends List<R1>> value2,
                                                               BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                               Function3<? super T1, ? super R1, ? super R2, ? extends List<R3>> value4,
                                                               Function4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.flatMap(inb -> {
                    List<R3> c = value4.apply(in,ina,inb);
                    return c.map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

    /**
     * Perform a For Comprehension over a List, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     *  import static com.oath.cyclops.reactor.Listes.forEach4;
     *
     *  forEach4(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>just(a+b),
    (a,b,c) -> List.<Integer>just(a+b+c),
    (a,b,c,d) -> a+b+c+d <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param value4 Nested List
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> List<R> forEach4(List<? extends T1> value1,
                                                                 Function<? super T1, ? extends List<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                                 Function3<? super T1, ? super R1, ? super R2, ? extends List<R3>> value4,
                                                                 Function4<? super T1, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
                                                                 Function4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.flatMap(inb -> {
                    List<R3> c = value4.apply(in,ina,inb);
                    return c.filter(in2->filterFunction.apply(in,ina,inb,in2))
                            .map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });
    }

    /**
     * Perform a For Comprehension over a List, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     * import static Lists.forEach3;
     *
     * forEach(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     *
     * @param value1 top level List
     * @param value2 Nested List
     * @param value3 Nested List
     * @param yieldingFunction Generates a result per combination
     * @return List with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> List<R> forEach3(List<? extends T1> value1,
                                                         Function<? super T1, ? extends List<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                         Function3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.map(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });


    }

    /**
     * Perform a For Comprehension over a List, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     * import static Lists.forEach;
     *
     * forEach(IntList.range(1,10).boxed(),
    a-> List.iterate(a,i->i+1).limit(10),
    (a,b) -> List.<Integer>of(a+b),
    (a,b,c) ->a+b+c<10,
    Tuple::tuple)
    .to(ReactiveConvertableSequence::converter).listX();
     * }
     * </pre>
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param value3 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T1, T2, R1, R2, R> List<R> forEach3(List<? extends T1> value1,
                                                         Function<? super T1, ? extends List<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends List<R2>> value3,
                                                         Function3<? super T1, ? super R1, ? super R2, Boolean> filterFunction,
                                                         Function3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {


        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                List<R2> b = value3.apply(in,ina);
                return b.filter(in2->filterFunction.apply(in,ina,in2))
                        .map(in2 -> yieldingFunction.apply(in, ina, in2));
            });



        });
    }

    /**
     * Perform a For Comprehension over a List, accepting an additonal generating function.
     * This results in a two level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     *  import static Lists.forEach2;
     *  forEach(IntList.range(1, 10).boxed(),
     *          i -> List.range(i, 10), Tuple::tuple)
    .forEach(System.out::println);

    //(1, 1)
    (1, 2)
    (1, 3)
    (1, 4)
    ...
     *
     * }</pre>
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> List<R> forEach2(List<? extends T> value1,
                                                Function<? super T, List<R1>> value2,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.map(in2 -> yieldingFunction.apply(in,  in2));
        });

    }

    /**
     *
     * <pre>
     * {@code
     *
     *   import static Lists.forEach2;
     *
     *   forEach(IntList.range(1, 10).boxed(),
     *           i -> List.range(i, 10),
     *           (a,b) -> a>2 && b<10,
     *           Tuple::tuple)
    .forEach(System.out::println);

    //(3, 3)
    (3, 4)
    (3, 5)
    (3, 6)
    (3, 7)
    (3, 8)
    (3, 9)
    ...

     *
     * }</pre>
     *
     *
     * @param value1 top level List
     * @param value2 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> List<R> forEach2(List<? extends T> value1,
                                                Function<? super T, ? extends List<R1>> value2,
                                                BiFunction<? super T, ? super R1, Boolean> filterFunction,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.flatMap(in -> {

            List<R1> a = value2.apply(in);
            return a.filter(in2->filterFunction.apply(in,in2))
                    .map(in2 -> yieldingFunction.apply(in,  in2));
        });
    }




}
