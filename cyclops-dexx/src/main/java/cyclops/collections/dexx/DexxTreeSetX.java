package cyclops.collections.dexx;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.oath.cyclops.data.collections.extensions.CollectionX;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.LazyPersistentSortedSetX;
import com.oath.cyclops.types.Unwrapable;
import com.oath.cyclops.types.foldable.Evaluation;
import cyclops.collections.immutable.OrderedSetX;
import cyclops.function.Reducer;
import cyclops.reactive.ReactiveSeq;
import cyclops.data.tuple.Tuple2;
import org.pcollections.PersistentSortedSet;


import com.github.andrewoma.dexx.collection.Builder;
import com.github.andrewoma.dexx.collection.TreeSet;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;



@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class DexxTreeSetX<T> extends AbstractSet<T>implements PersistentSortedSet<T>, Unwrapable {

    public static <T> OrderedSetX<T> treeSetX(ReactiveSeq<T> stream, Comparator<? super T> c){
        return fromStream(stream,c);
    }
    public static <T extends Comparable<? super T>> OrderedSetX<T> treeSetX(ReactiveSeq<T> stream){
        return fromStream(stream);
    }
    @Override
    public <R> R unwrap() {
        return (R)set;
    }
    public static <T> OrderedSetX<T> copyFromCollection(CollectionX<T> vec, Comparator<T> comp) {

        return DexxTreeSetX.empty(comp)
                .plusAll(vec);

    }
    /**
     * Create a LazyPersistentSortedSetX from a Stream
     *
     * @param stream to construct a LazyQueueX from
     * @return LazyPersistentSortedSetX
     */
    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> fromStream(Stream<T> stream) {
        Reducer<PersistentSortedSet<T>> r = DexxTreeSetX.<T>toPersistentSortedSet(Comparator.naturalOrder());
        return new LazyPersistentSortedSetX<T>(null, ReactiveSeq.fromStream(stream),
                                  r, Evaluation.LAZY);
    }
    public static <T> LazyPersistentSortedSetX<T> fromStream(Stream<T> stream, Comparator<? super T> c) {
        Reducer<PersistentSortedSet<T>> r = DexxTreeSetX.<T>toPersistentSortedSet((Comparator<T>)c);
        return new LazyPersistentSortedSetX<T>(null, ReactiveSeq.fromStream(stream),
                r, Evaluation.LAZY);
    }

    /**
     * Create a LazyPersistentSortedSetX that contains the Integers between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPersistentSortedSetX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPersistentSortedSetX that contains the Longs between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPersistentSortedSetX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a SetX
     *
     * <pre>
     * {@code
     *  LazyPersistentSortedSetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     *
     * //(1,2,3,4,5)
     *
     * }</pre>
     *
     * @param seed Initial value
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    public static <U, T extends Comparable<? super T>> LazyPersistentSortedSetX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPersistentSortedSetX from the provided Supplier up to the provided limit number of times
     *
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPersistentSortedSetX by iterative application of a function to an initial element up to the supplied limit number of times
     *
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code
     * PersistentSortedSet<Integer> q = JSPersistentSortedSet.<Integer>toPersistentSortedSet()
                                     .mapReduce(Stream.of(1,2,3,4));
     *
     * }
     * </pre>
     * @return Reducer for PersistentSortedSet
     */
    public static <T extends Comparable<? super T>>  Reducer<PersistentSortedSet<T>> toPersistentSortedSet() {
        return Reducer.<PersistentSortedSet<T>> of(DexxTreeSetX.emptyPersistentSortedSet(), (final PersistentSortedSet<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> DexxTreeSetX.singleton(x));
    }

    public static <T>  Reducer<PersistentSortedSet<T>> toPersistentSortedSet(Comparator<T> ordering) {
        return Reducer.<PersistentSortedSet<T>> of(DexxTreeSetX.emptyPersistentSortedSet(ordering),
                                           (final PersistentSortedSet<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> DexxTreeSetX.singleton(ordering,x));
    }

    public static <T> DexxTreeSetX<T> fromSet(TreeSet<T> set) {
        return new DexxTreeSetX<>(
                                 set);
    }


    public static <T extends Comparable<? super T>> DexxTreeSetX<T> emptyPersistentSortedSet() {
        return new DexxTreeSetX<>(new TreeSet<T>(Comparator.naturalOrder()));
    }

    public static <T> DexxTreeSetX<T> emptyPersistentSortedSet(Comparator<T> comp) {
        TreeSet<T> tree = new TreeSet<T>(comp);
        return new DexxTreeSetX<T>(tree);
    }

    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> empty() {

        return fromPersistentSortedSet(new DexxTreeSetX<>(new TreeSet<T>(Comparator.naturalOrder())),
                                                toPersistentSortedSet());
    }
    public static <T> LazyPersistentSortedSetX<T> empty(Comparator<T> comp) {

        return fromPersistentSortedSet(new DexxTreeSetX<>(new TreeSet<T>(comp)),
                                                toPersistentSortedSet(comp));
    }

    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> singleton(T t) {
        return of(t);
    }
    public static <T> LazyPersistentSortedSetX<T> singleton(Comparator<T> comp,T t) {
        return of(comp,t);
    }
    public static <T> LazyPersistentSortedSetX<T> of(Comparator<T> comp,T... t) {

        Builder<T, TreeSet<T>> lb = TreeSet.factory(comp).newBuilder();
       for (T next : t)
           lb.add(next);
       TreeSet<T> vec = lb.build();
       return fromPersistentSortedSet(new DexxTreeSetX<>(
                                                       vec),
                                     toPersistentSortedSet(comp));
   }

    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> of(T... t) {

        return of(Comparator.naturalOrder(),t);
    }


    public static <T> LazyPersistentSortedSetX<T> PersistentSortedSet(TreeSet<T> q) {
        Reducer<PersistentSortedSet<T>> local = toPersistentSortedSet((Comparator<T>)q.comparator());
        return fromPersistentSortedSet(new DexxTreeSetX<T>(
                                                         q),
                                      local);
    }

    @SafeVarargs
    public static <T extends Comparable<? super T>> LazyPersistentSortedSetX<T> PersistentSortedSet(T... elements) {
        return fromPersistentSortedSet(of(elements), toPersistentSortedSet());
    }
    private static <T> LazyPersistentSortedSetX<T> fromPersistentSortedSet(PersistentSortedSet<T> ordered, Reducer<PersistentSortedSet<T>> reducer) {
        return  new LazyPersistentSortedSetX<T>(ordered,null,reducer,Evaluation.LAZY);
    }
    @Wither
    private final TreeSet<T> set;

    @Override
    public DexxTreeSetX<T> plus(T e) {

        return withSet(set.add(e));
    }

    @Override
    public DexxTreeSetX<T> plusAll(Collection<? extends T> l) {
        TreeSet<T> vec = set;
        for (T next : l) {
            vec = vec.add(next);
        }

        return withSet(vec);

    }






    @Override
    public PersistentSortedSet<T> minus(Object e) {
        return withSet(set.remove((T)e));

    }

    @Override
    public PersistentSortedSet<T> minusAll(Collection<?> s) {
        TreeSet<T> vec = set;
        for (Object next : s) {

            vec = vec.remove((T)next);
        }

        return withSet(vec);
    }




    @Override
    public int size() {
        return set.size();
    }

    @Override
    public Iterator<T> iterator() {
        return set.iterator();
    }

    @Override
    public T get(int index) {
        return set.toIndexedList().get(index);
    }

    @Override
    public int indexOf(Object o) {
        return set.toIndexedList().indexOf((T)o);
    }



}
