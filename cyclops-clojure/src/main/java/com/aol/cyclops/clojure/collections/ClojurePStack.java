package com.aol.cyclops.clojure.collections;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.ConsPStack;
import org.pcollections.PStack;

import com.aol.cyclops.Reducer;
import com.aol.cyclops.control.ReactiveSeq;
import com.aol.cyclops.reactor.collections.extensions.persistent.LazyPStackX;

import clojure.lang.IPersistentList;
import clojure.lang.PersistentList;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import reactor.core.publisher.Flux;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ClojurePStack<T> extends AbstractList<T>implements PStack<T> {

    /**
     * Create a LazyPStackX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPStackX
     */
    public static <T> LazyPStackX<T> fromStream(Stream<T> stream) {
        return new LazyPStackX<T>(
                                  Flux.from(ReactiveSeq.fromStream(stream)), toPStack());
    }

    /**
     * Create a LazyPStackX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPStackX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range ListX
     */
    public static LazyPStackX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a ListX
     * 
     * <pre>
     * {@code 
     *  LazyPStackX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return ListX generated by unfolder function
     */
    public static <U, T> LazyPStackX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPStackX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate ListX elements
     * @return ListX generated from the provided Supplier
     */
    public static <T> LazyPStackX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPStackX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return ListX generated by iterative application
     */
    public static <T> LazyPStackX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * PStack<Integer> q = JSPStack.<Integer>toPStack()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for PStack
     */
    public static <T> Reducer<PStack<T>> toPStack() {
        return Reducer.<PStack<T>> of(ClojurePStack.emptyPStack(), (final PStack<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> ClojurePStack.singleton(x));
    }

    public static <T> ClojurePStack<T> fromList(List<T> list) {
        return new ClojurePStack<T>(
                                    PersistentList.create(list));
    }

    public static <T> ClojurePStack<T> emptyPStack() {

        return new ClojurePStack<T>(
                                    PersistentList.create(Arrays.asList()));
    }

    public static <T> LazyPStackX<T> empty() {
        return of();
    }

    public static <T> LazyPStackX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyPStackX<T> of(T... t) {

        return LazyPStackX.fromPStack(new ClojurePStack<T>(
                                                           PersistentList.create(Arrays.asList(t))),
                                      toPStack());
    }

    public static <T> LazyPStackX<T> PStack(List<T> q) {
        return LazyPStackX.fromPStack(new ClojurePStack<T>(
                                                           PersistentList.create(q)),
                                      toPStack());
    }

    @SafeVarargs
    public static <T> LazyPStackX<T> PStack(T... elements) {
        return LazyPStackX.fromPStack(of(elements), toPStack());
    }

    @Wither
    private final IPersistentList list;

    @Override
    public ClojurePStack<T> plus(T e) {
        return withList((IPersistentList) list.cons(e));
    }

    @Override
    public ClojurePStack<T> plusAll(Collection<? extends T> l) {

        IPersistentList vec = list;
        for (T next : l) {
            vec = (IPersistentList) vec.cons(next);
        }

        return withList(vec);
    }

    @Override
    public ClojurePStack<T> with(int i, T e) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());

        PersistentList nel = (PersistentList) list;
        if (i == 0) {
            if (head().equals(e))
                return this;
            return withList((IPersistentList) tail().list.cons(e));

        }
        IPersistentList newRest = tail().with(i - 1, e).list;

        if (newRest == nel.next())
            return this;
        return withList((IPersistentList) newRest.cons(head()));

    }

    @Override
    public ClojurePStack<T> plus(int i, T e) {
        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException();
        if (i == 0) // insert at beginning
            return plus(e);
        return withList((IPersistentList) tail().plus(i - 1, e).list.cons(head()));

    }

    @Override
    public ClojurePStack<T> plusAll(int i, Collection<? extends T> l) {

        if (i < 0 || i > size())
            throw new IndexOutOfBoundsException(
                                                "Index " + i + " is out of bounds - size : " + size());
        if (i == 0)
            return plusAll(l);
        return withList((IPersistentList) tail().plusAll(i - 1, l).list.cons(head()));

    }
    
    

    @Override
    public ClojurePStack<T> minus(Object e) {
        if (size() == 0)
            return this;
        PersistentList nel = (PersistentList) list;
        if (head().equals(e)){
            
            IPersistentList res = (IPersistentList)nel.next();
            if(res==null)
                res = PersistentList.create(Arrays.asList());
            return withList(res);
        }

        IPersistentList newRest = tail().minus(e).list;

        if (newRest == ((PersistentList) list).next())
            return this;
       
        return withList((IPersistentList) newRest.cons(nel.first()));

    }

    @Override
    public ClojurePStack<T> minusAll(Collection<?> l) {
        if (size() == 0)
            return this;
        PersistentList nel = (PersistentList) list;
        if (l.contains(head())){
            IPersistentList res1 = (IPersistentList)nel.next();
            if(res1==null)
                return withList(PersistentList.create(Arrays.asList()));
            return tail().minusAll(l);
        }
       
        IPersistentList res2 = (IPersistentList)nel.next();
        if(res2==null)
            return withList(PersistentList.create(Arrays.asList()));
        IPersistentList newRest = tail().minusAll(l).list;
        if (newRest == nel.next())
            return this;
        return withList((IPersistentList) newRest.cons(nel.first()));
    }

    public ClojurePStack<T> tail() {
        PersistentList nel = (PersistentList) list;
        return withList((IPersistentList) nel.next());
    }

    public T head() {
        PersistentList nel = (PersistentList) list;
        return (T) nel.first();
    }

    @Override
    public ClojurePStack<T> minus(int i) {

        return minus(get(i));
    }

    @Override
    public ClojurePStack<T> subList(int start, int end) {

        if (start < 0 || end > size() || start > end)
            throw new IndexOutOfBoundsException(
                                                "Index  is out of bounds - size : " + size());
        if (end == size())
            return subList(start);
        if (start == end)
            return withList(PersistentList.EMPTY);
        if (start == 0) {
            return withList((IPersistentList) tail().subList(0, end - 1).list.cons(head()));
        }

        return tail().subList(start - 1, end - 1);
    }

    @Override
    public T get(int index) {
        PersistentList nel = (PersistentList) list;
        return (T) nel.get(index);
    }

    @Override
    public int size() {
        if (list instanceof PersistentList) {

            PersistentList nel = (PersistentList) list;
            return nel.size();
        }
        return 0;
    }

    @Override
    public ClojurePStack<T> subList(int start) {
        return subList(start, size());
    }

}
