package com.aol.cyclops.functionaljava;

import com.aol.cyclops.functionaljava.FJWitness.list;
import com.aol.cyclops.functionaljava.FJWitness.nonEmptyList;
import com.aol.cyclops.functionaljava.hkt.NonEmptyListKind;
import com.aol.cyclops2.hkt.Higher;
import com.aol.cyclops2.types.anyM.AnyMSeq;
import cyclops.collections.ListX;
import cyclops.function.Fn3;
import cyclops.function.Fn4;
import cyclops.function.Monoid;
import cyclops.monads.AnyM;
import cyclops.stream.ReactiveSeq;
import cyclops.typeclasses.Pure;
import cyclops.typeclasses.foldable.Foldable;
import cyclops.typeclasses.functor.Functor;
import cyclops.typeclasses.instances.General;
import cyclops.typeclasses.monad.*;
import fj.data.NonEmptyList;
import lombok.experimental.UtilityClass;

import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Function;


public class NonEmptyLists {
   
    public static <T> AnyMSeq<nonEmptyList,T> anyM(NonEmptyList<T> option) {
        return AnyM.ofSeq(option, nonEmptyList.INSTANCE);
    }
    /**
     * Perform a For Comprehension over a NonEmptyList, accepting 3 generating functions.
     * This results in a four level nested internal iteration over the provided Publishers.
     *
     *  <pre>
     * {@code
     *
     *   import static cyclops.NonEmptyLists.forEach4;
     *
    forEach4(IntNonEmptyList.range(1,10).boxed(),
    a-> NonEmptyList.iterate(a,i->i+1).limit(10),
    (a,b) -> NonEmptyList.<Integer>of(a+b),
    (a,b,c) -> NonEmptyList.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level NonEmptyList
     * @param value2 Nested NonEmptyList
     * @param value3 Nested NonEmptyList
     * @param value4 Nested NonEmptyList
     * @param yieldingFunction  Generates a result per combination
     * @return NonEmptyList with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> NonEmptyList<R> forEach4(NonEmptyList<? extends T1> value1,
                                                               Function<? super T1, ? extends NonEmptyList<R1>> value2,
                                                               BiFunction<? super T1, ? super R1, ? extends NonEmptyList<R2>> value3,
                                                               Fn3<? super T1, ? super R1, ? super R2, ? extends NonEmptyList<R3>> value4,
                                                               Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            NonEmptyList<R1> a = value2.apply(in);
            return a.bind(ina -> {
                NonEmptyList<R2> b = value3.apply(in,ina);
                return b.bind(inb -> {
                    NonEmptyList<R3> c = value4.apply(in,ina,inb);
                    return c.map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

  

    /**
     * Perform a For Comprehension over a NonEmptyList, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     * import static NonEmptyLists.forEach3;
     *
     * forEach(IntNonEmptyList.range(1,10).boxed(),
    a-> NonEmptyList.iterate(a,i->i+1).limit(10),
    (a,b) -> NonEmptyList.<Integer>of(a+b),
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     *
     * @param value1 top level NonEmptyList
     * @param value2 Nested NonEmptyList
     * @param value3 Nested NonEmptyList
     * @param yieldingFunction Generates a result per combination
     * @return NonEmptyList with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> NonEmptyList<R> forEach3(NonEmptyList<? extends T1> value1,
                                                         Function<? super T1, ? extends NonEmptyList<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends NonEmptyList<R2>> value3,
                                                         Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.bind(in -> {

            NonEmptyList<R1> a = value2.apply(in);
            return a.bind(ina -> {
                NonEmptyList<R2> b = value3.apply(in,ina);
                return b.map(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });


    }

   

    /**
     * Perform a For Comprehension over a NonEmptyList, accepting an additonal generating function.
     * This results in a two level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     *  import static NonEmptyLists.forEach2;
     *  forEach(IntNonEmptyList.range(1, 10).boxed(),
     *          i -> NonEmptyList.range(i, 10), Tuple::tuple)
    .forEach(System.out::println);

    //(1, 1)
    (1, 2)
    (1, 3)
    (1, 4)
    ...
     *
     * }</pre>
     *
     * @param value1 top level NonEmptyList
     * @param value2 Nested publisher
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> NonEmptyList<R> forEach2(NonEmptyList<? extends T> value1,
                                                Function<? super T, NonEmptyList<R1>> value2,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.bind(in -> {

            NonEmptyList<R1> a = value2.apply(in);
            return a.map(in2 -> yieldingFunction.apply(in,  in2));
        });

    }


    /**
     * Companion class for creating Type Class instances for working with NonEmptyLists
     * @author johnmcclean
     *
     */
    @UtilityClass
    public static class Instances {


        /**
         *
         * Transform a list, mulitplying every element by 2
         *
         * <pre>
         * {@code
         *  NonEmptyListKind<Integer> list = NonEmptyLists.functor().map(i->i*2, NonEmptyListKind.widen(Arrays.asNonEmptyList(1,2,3));
         *
         *  //[2,4,6]
         *
         *
         * }
         * </pre>
         *
         * An example fluent api working with NonEmptyLists
         * <pre>
         * {@code
         *   NonEmptyListKind<Integer> list = NonEmptyLists.unit()
        .unit("hello")
        .then(h->NonEmptyLists.functor().map((String v) ->v.length(), h))
        .convert(NonEmptyListKind::narrowK);
         *
         * }
         * </pre>
         *
         *
         * @return A functor for NonEmptyLists
         */
        public static <T,R>Functor<NonEmptyListKind.µ> functor(){
            BiFunction<NonEmptyListKind<T>,Function<? super T, ? extends R>,NonEmptyListKind<R>> map = Instances::map;
            return General.functor(map);
        }
        /**
         * <pre>
         * {@code
         * NonEmptyListKind<String> list = NonEmptyLists.unit()
        .unit("hello")
        .convert(NonEmptyListKind::narrowK);

        //Arrays.asNonEmptyList("hello"))
         *
         * }
         * </pre>
         *
         *
         * @return A factory for NonEmptyLists
         */
        public static <T> Pure<NonEmptyListKind.µ> unit(){
            return General.<NonEmptyListKind.µ,T>unit(Instances::of);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.NonEmptyListKind.widen;
         * import static com.aol.cyclops.util.function.Lambda.l1;
         * import static java.util.Arrays.asNonEmptyList;
         *
        NonEmptyLists.zippingApplicative()
        .ap(widen(asNonEmptyList(l1(this::multiplyByTwo))),widen(asNonEmptyList(1,2,3)));
         *
         * //[2,4,6]
         * }
         * </pre>
         *
         *
         * Example fluent API
         * <pre>
         * {@code
         * NonEmptyListKind<Function<Integer,Integer>> listFn =NonEmptyLists.unit()
         *                                                  .unit(Lambda.l1((Integer i) ->i*2))
         *                                                  .convert(NonEmptyListKind::narrowK);

        NonEmptyListKind<Integer> list = NonEmptyLists.unit()
        .unit("hello")
        .then(h->NonEmptyLists.functor().map((String v) ->v.length(), h))
        .then(h->NonEmptyLists.zippingApplicative().ap(listFn, h))
        .convert(NonEmptyListKind::narrowK);

        //Arrays.asNonEmptyList("hello".length()*2))
         *
         * }
         * </pre>
         *
         *
         * @return A zipper for NonEmptyLists
         */
        public static <T,R> Applicative<NonEmptyListKind.µ> zippingApplicative(){
            BiFunction<NonEmptyListKind< Function<T, R>>,NonEmptyListKind<T>,NonEmptyListKind<R>> ap = Instances::ap;
            return General.applicative(functor(), unit(), ap);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.NonEmptyListKind.widen;
         * NonEmptyListKind<Integer> list  = NonEmptyLists.monad()
        .flatMap(i->widen(NonEmptyListX.range(0,i)), widen(Arrays.asNonEmptyList(1,2,3)))
        .convert(NonEmptyListKind::narrowK);
         * }
         * </pre>
         *
         * Example fluent API
         * <pre>
         * {@code
         *    NonEmptyListKind<Integer> list = NonEmptyLists.unit()
        .unit("hello")
        .then(h->NonEmptyLists.monad().flatMap((String v) ->NonEmptyLists.unit().unit(v.length()), h))
        .convert(NonEmptyListKind::narrowK);

        //Arrays.asNonEmptyList("hello".length())
         *
         * }
         * </pre>
         *
         * @return Type class with monad functions for NonEmptyLists
         */
        public static <T,R> Monad<NonEmptyListKind.µ> monad(){

            BiFunction<Higher<NonEmptyListKind.µ,T>,Function<? super T, ? extends Higher<NonEmptyListKind.µ,R>>,Higher<NonEmptyListKind.µ,R>> flatMap = Instances::flatMap;
            return General.monad(zippingApplicative(), flatMap);
        }






        /**
         *
         * <pre>
         * {@code
         * int sum  = NonEmptyLists.foldable()
        .foldLeft(0, (a,b)->a+b, NonEmptyListKind.widen(Arrays.asNonEmptyList(1,2,3,4)));

        //10
         *
         * }
         * </pre>
         *
         *
         * @return Type class for folding / reduction operations
         */
        public static <T> Foldable<NonEmptyListKind.µ> foldable(){
            BiFunction<Monoid<T>,Higher<NonEmptyListKind.µ,T>,T> foldRightFn =  (m, l)-> ListX.fromIterable(NonEmptyListKind.narrow(l)).foldRight(m);
            BiFunction<Monoid<T>,Higher<NonEmptyListKind.µ,T>,T> foldLeftFn = (m, l)-> ListX.fromIterable(NonEmptyListKind.narrow(l)).reduce(m);
            return General.foldable(foldRightFn, foldLeftFn);
        }


        private <T> NonEmptyListKind<T> of(T value){
            return NonEmptyListKind.of(value);
        }
        private static <T,R> NonEmptyListKind<R> ap(NonEmptyListKind<Function< T, R>> lt, NonEmptyListKind<T> list){

            return NonEmptyListKind.widen(lt.zipWith(list.narrow().toList(),(a, b)->a.apply(b)));
        }
        private static <T,R> Higher<NonEmptyListKind.µ,R> flatMap(Higher<NonEmptyListKind.µ,T> lt, Function<? super T, ? extends  Higher<NonEmptyListKind.µ,R>> fn){
            return NonEmptyListKind.widen(NonEmptyListKind.narrow(lt).bind(in->fn.andThen(NonEmptyListKind::narrow).apply(in)));
        }
        private static <T,R> NonEmptyListKind<R> map(NonEmptyListKind<T> lt, Function<? super T, ? extends R> fn){
            return NonEmptyListKind.widen(NonEmptyListKind.narrow(lt).map(in->fn.apply(in)));
        }
    }


}
