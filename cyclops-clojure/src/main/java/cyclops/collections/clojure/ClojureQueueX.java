package cyclops.collections.clojure;

import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import com.oath.cyclops.data.collections.extensions.CollectionX;
import com.oath.cyclops.data.collections.extensions.lazy.immutable.LazyPQueueX;
import com.oath.cyclops.types.Unwrapable;
import com.oath.cyclops.types.foldable.Evaluation;
import cyclops.collections.immutable.PersistentQueueX;
import cyclops.companion.Monoids;
import cyclops.control.Option;
import cyclops.data.BankersQueue;
import cyclops.function.Reducer;
import cyclops.reactive.ReactiveSeq;
import cyclops.data.tuple.Tuple2;



import clojure.lang.PersistentQueue;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;


@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class ClojureQueueX<T>  implements com.oath.cyclops.types.persistent.PersistentQueue<T>, Unwrapable {

    public static <T> PersistentQueueX<T> queueX(ReactiveSeq<T> stream){
        return fromStream(stream);
    }
    public static <T> PersistentQueueX<T> copyFromCollection(CollectionX<T> vec) {

        return ClojureQueueX.<T>empty()
                         .plusAll(vec);

    }
    @Override
    public <R> R unwrap() {
        return (R)queue;
    }
    /**
     * Create a LazyPQueueX from a Stream
     *
     * @param stream to construct a LazyQueueX from
     * @return LazyPQueueX
     */
    public static <T> LazyPQueueX<T> fromStream(Stream<T> stream) {
        Reducer<PersistentQueue<T>,T> q = toPersistentQueue();
        return new LazyPQueueX<T>(null, ReactiveSeq.fromStream(stream), q, Evaluation.LAZY);
    }

    /**
     * Create a LazyPQueueX that contains the Integers between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range QueueX
     */
    public static LazyPQueueX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPQueueX that contains the Longs between start and end
     *
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range QueueX
     */
    public static LazyPQueueX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a QueueX
     *
     * <pre>
     * {@code
     *  LazyPQueueX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     *
     * //(1,2,3,4,5)
     *
     * }</pre>
     *
     * @param seed Initial value
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return QueueX generated by unfolder function
     */
    public static <U, T> LazyPQueueX<T> unfold(U seed, Function<? super U, Option<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPQueueX from the provided Supplier up to the provided limit number of times
     *
     * @param limit Max number of elements to generate
     * @param s Supplier to generate QueueX elements
     * @return QueueX generated from the provided Supplier
     */
    public static <T> LazyPQueueX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPQueueX by iterative application of a function to an initial element up to the supplied limit number of times
     *
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return QueueX generated by iterative application
     */
    public static <T> LazyPQueueX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    public static <T> Reducer<com.oath.cyclops.types.persistent.PersistentQueue<T>,T> toPersistentQueue() {
    return Reducer.fromMonoid(Monoids.<T, com.oath.cyclops.types.persistent.PersistentQueue<T>>pcollectionConcat(ClojureQueueX.emptyPersistentQueue()), a ->ClojureQueueX.singleton(a));
   }

    public static <T> ClojureQueueX<T> fromQueue(PersistentQueue queue) {
        return new ClojureQueueX<>(
                                 queue);
    }

    public static <T> ClojureQueueX<T> emptyPersistentQueue() {

        return new ClojureQueueX<>(PersistentQueue.EMPTY);
    }

    public static <T> LazyPQueueX<T> empty() {
        return fromPersistentQueue(new ClojureQueueX<>(PersistentQueue.EMPTY),
                                      toPersistentQueue());
    }
    private static <T> LazyPQueueX<T> fromPersistentQueue(com.oath.cyclops.types.persistent.PersistentQueue<T> ts, Reducer<com.oath.cyclops.types.persistent.PersistentQueue<T>,T> pQueueReducer) {
        return new LazyPQueueX<T>(ts,null,pQueueReducer, Evaluation.LAZY);
    }

    public static <T> LazyPQueueX<T> singleton(T t) {
        return of(t);
    }

    public static <T> LazyPQueueX<T> of(T... t) {

        PersistentQueue use = PersistentQueue.EMPTY;
        for (T next : t)
            use = (PersistentQueue) use.cons(next);

        return fromPersistentQueue(new ClojureQueueX<>(use),
                                      toPersistentQueue());
    }

    public static <T> LazyPQueueX<T> PersistentQueue(PersistentQueue q) {
        return fromPersistentQueue(new ClojureQueueX<T>(
                                                         q),
                                      toPersistentQueue());
    }

    @SafeVarargs
    public static <T> LazyPQueueX<T> PersistentQueue(T... elements) {
        return fromPersistentQueue(of(elements), toPersistentQueue());
    }

    @Wither
    private final PersistentQueue queue;

    @Override
    public ClojureQueueX<T> plus(T e) {

        return withQueue(queue.cons(e));
    }

    @Override
    public ClojureQueueX<T> plusAll(Iterable<? extends T> l) {

        PersistentQueue use = queue;
        for (T next : l)
            use = (PersistentQueue) use.cons(next);
        return withQueue(use);
    }




    @Override
    public com.oath.cyclops.types.persistent.PersistentQueue<T> removeValue(T e) {
        return fromPersistentQueue(this, toPersistentQueue())
                          .filter(i -> !Objects.equals(i, e));
    }

    @Override
    public com.oath.cyclops.types.persistent.PersistentQueue<T> removeAll(Iterable<? extends T> queue) {
        return (LazyPQueueX<T>)fromPersistentQueue(this, toPersistentQueue())
                          .removeAllI((Iterable<T>) queue);
    }









    @Override
    public int size() {
        return queue.size();
    }



    @Override
    public com.oath.cyclops.types.persistent.PersistentQueue<T> minus() {

        return withQueue(queue.pop());
    }



    @Override
    public Iterator<T> iterator() {
        return queue.iterator();
    }




}
