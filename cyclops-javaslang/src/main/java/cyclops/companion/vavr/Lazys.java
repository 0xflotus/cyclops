package cyclops.companion.vavr;


import com.aol.cyclops.vavr.FromCyclopsReact;
import com.aol.cyclops.vavr.ToCyclopsReact;
import com.aol.cyclops.vavr.hkt.LazyKind;
import com.aol.cyclops2.data.collections.extensions.CollectionX;
import com.aol.cyclops2.hkt.Higher;
import com.aol.cyclops2.types.Value;
import cyclops.collections.mutable.ListX;
import cyclops.control.Eval;
import cyclops.function.Fn3;
import cyclops.function.Fn4;
import cyclops.function.Monoid;
import cyclops.function.Reducer;
import cyclops.monads.AnyM;
import cyclops.monads.Witness;
import cyclops.monads.WitnessType;
import cyclops.monads.transformers.EvalT;
import cyclops.stream.ReactiveSeq;
import cyclops.typeclasses.Pure;
import cyclops.typeclasses.comonad.Comonad;
import cyclops.typeclasses.foldable.Foldable;
import cyclops.typeclasses.functor.Functor;
import cyclops.typeclasses.instances.General;
import cyclops.typeclasses.monad.*;
import javaslang.Lazy;
import lombok.experimental.UtilityClass;
import org.reactivestreams.Publisher;

import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Stream;

public class Lazys {
    /**
     * Lifts a vavr Lazy into a cyclops LazyT monad transformer (involves an async conversion to
     * cyclops Lazy types)
     *
     */
    public static <T,W extends WitnessType<W>> EvalT<W, T> liftM(Lazy<T> opt, W witness) {
        return EvalT.of(witness.adapter().unit(ToCyclopsReact.eval(opt)));
    }
    /**
     * Perform a For Comprehension over a Lazy, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Lazys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.aol.cyclops2.reactor.Lazys.forEach4;
     *
    forEach4(Lazy.just(1),
    a-> Lazy.just(a+1),
    (a,b) -> Lazy.<Integer>just(a+b),
    a                  (a,b,c) -> Lazy.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Lazy
     * @param value2 Nested Lazy
     * @param value3 Nested Lazy
     * @param value4 Nested Lazy
     * @param yieldingFunction Generates a result per combination
     * @return Lazy with a combined value generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> Lazy<R> forEach4(Lazy<? extends T1> value1,
                                                               Function<? super T1, ? extends Lazy<R1>> value2,
                                                               BiFunction<? super T1, ? super R1, ? extends Lazy<R2>> value3,
                                                               Fn3<? super T1, ? super R1, ? super R2, ? extends Lazy<R3>> value4,
                                                               Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        Eval<R> res = ToCyclopsReact.eval(value1).flatMap(in -> {

            Lazy<R1> a = value2.apply(in);
            return ToCyclopsReact.eval(a).flatMap(ina -> {
                Lazy<R2> b = value3.apply(in, ina);
                return ToCyclopsReact.eval(b).flatMap(inb -> {
                    Lazy<R3> c = value4.apply(in, ina, inb);
                    return ToCyclopsReact.eval(c).map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });
        return FromCyclopsReact.eval(res);
    }



    /**
     * Perform a For Comprehension over a Lazy, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Lazys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.aol.cyclops2.reactor.Lazys.forEach3;
     *
    forEach3(Lazy.just(1),
    a-> Lazy.just(a+1),
    (a,b) -> Lazy.<Integer>just(a+b),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Lazy
     * @param value2 Nested Lazy
     * @param value3 Nested Lazy
     * @param yieldingFunction Generates a result per combination
     * @return Lazy with a combined value generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> Lazy<R> forEach3(Lazy<? extends T1> value1,
                                                       Function<? super T1, ? extends Lazy<R1>> value2,
                                                       BiFunction<? super T1, ? super R1, ? extends Lazy<R2>> value3,
                                                       Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        Eval<? extends R> res = ToCyclopsReact.eval(value1).flatMap(in -> {

            Lazy<R1> a = value2.apply(in);
            return ToCyclopsReact.eval(a).flatMap(ina -> {
                Lazy<R2> b = value3.apply(in, ina);
                return ToCyclopsReact.eval(b).map(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });

        return FromCyclopsReact.eval(Eval.narrow(res));

    }


    /**
     * Perform a For Comprehension over a Lazy, accepting a generating function.
     * This results in a two level nested internal iteration over the provided Lazys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.aol.cyclops2.reactor.Lazys.forEach;
     *
    forEach(Lazy.just(1),
    a-> Lazy.just(a+1),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Lazy
     * @param value2 Nested Lazy
     * @param yieldingFunction Generates a result per combination
     * @return Lazy with a combined value generated by the yielding function
     */
    public static <T, R1, R> Lazy<R> forEach2(Lazy<? extends T> value1, Function<? super T, Lazy<R1>> value2,
                                              BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        Eval<? extends R> res = ToCyclopsReact.eval(value1).flatMap(in -> {

            Lazy<R1> a = value2.apply(in);
            return ToCyclopsReact.eval(a).map(in2 -> yieldingFunction.apply(in, in2));
        });


        return FromCyclopsReact.eval(Eval.narrow(res));
    }




    /**
     * Sequence operation, take a Collection of Lazys and turn it into a Lazy with a Collection
     * By constrast with {@link Lazys#sequencePresent(CollectionX)}, if any Lazys are empty the result
     * is an empty Lazy
     *
     * <pre>
     * {@code
     *
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();
     *
     *  Lazy<ListX<Integer>> opts = Lazys.sequence(ListX.of(just, none, Lazy.of(1)));
    //Lazy.empty();
     *
     * }
     * </pre>
     *
     *
     * @param opts Maybes to Sequence
     * @return  Maybe with a List of values
     */
    public static <T> Lazy<ListX<T>> sequence(final CollectionX<Lazy<T>> opts) {
        return sequence(opts.stream()).map(s -> s.toListX());

    }
    /**
     * Sequence operation, take a Collection of Lazys and turn it into a Lazy with a Collection
     * Only successes are retained. By constrast with {@link Lazys#sequence(CollectionX)} Lazy#empty types are
     * tolerated and ignored.
     *
     * <pre>
     * {@code
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();
     *
     * Lazy<ListX<Integer>> maybes = Lazys.sequencePresent(ListX.of(just, none, Lazy.of(1)));
    //Lazy.of(ListX.of(10, 1));
     * }
     * </pre>
     *
     * @param opts Lazys to Sequence
     * @return Lazy with a List of values
     */
    public static <T> Lazy<ListX<T>> sequencePresent(final CollectionX<Lazy<T>> opts) {
        return sequence(opts.stream().filter(Lazy::isEvaluated)).map(s->s.toListX());
    }
    /**
     * Sequence operation, take a Collection of Lazys and turn it into a Lazy with a Collection
     * By constrast with {@link Lazys#sequencePresent(CollectionX)} if any Lazy types are empty
     * the return type will be an empty Lazy
     *
     * <pre>
     * {@code
     *
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();
     *
     *  Lazy<ListX<Integer>> maybes = Lazys.sequence(ListX.of(just, none, Lazy.of(1)));
    //Lazy.empty();
     *
     * }
     * </pre>
     *
     *
     * @param opts Maybes to Sequence
     * @return  Lazy with a List of values
     */
    public static <T> Lazy<ReactiveSeq<T>> sequence(final Stream<Lazy<T>> opts) {
        return FromCyclopsReact.eval(AnyM.sequence(opts.map(ToCyclopsReact::eval).map(AnyM::fromEval), Witness.eval.INSTANCE)
                .map(ReactiveSeq::fromStream)
                .to(Witness::eval));

    }
    /**
     * Accummulating operation using the supplied Reducer (@see cyclops2.Reducers). A typical use case is to accumulate into a Persistent Collection type.
     * Accumulates the present results, ignores empty Lazys.
     *
     * <pre>
     * {@code
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();

     * Lazy<PersistentSetX<Integer>> opts = Lazy.accumulateJust(ListX.of(just, none, Lazy.of(1)), Reducers.toPersistentSetX());
    //Lazy.of(PersistentSetX.of(10, 1)));
     *
     * }
     * </pre>
     *
     * @param futureals Lazys to accumulate
     * @param reducer Reducer to accumulate values with
     * @return Lazy with reduced value
     */
    public static <T, R> Lazy<R> accumulatePresent(final CollectionX<Lazy<T>> futureals, final Reducer<R> reducer) {
        return sequencePresent(futureals).map(s -> s.mapReduce(reducer));
    }
    /**
     * Accumulate the results only from those Lazys which have a value present, using the supplied mapping function to
     * convert the data from each Lazy before reducing them using the supplied Monoid (a combining BiFunction/BinaryOperator and identity element that takes two
     * input values of the same type and returns the combined result) {@see cyclops2.Monoids }.
     *
     * <pre>
     * {@code
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();

     *  Lazy<String> opts = Lazy.accumulateJust(ListX.of(just, none, Lazy.of(1)), i -> "" + i,
    Monoids.stringConcat);
    //Lazy.of("101")
     *
     * }
     * </pre>
     *
     * @param futureals Lazys to accumulate
     * @param mapper Mapping function to be applied to the result of each Lazy
     * @param reducer Monoid to combine values from each Lazy
     * @return Lazy with reduced value
     */
    public static <T, R> Lazy<R> accumulatePresent(final CollectionX<Lazy<T>> futureals, final Function<? super T, R> mapper,
                                                   final Monoid<R> reducer) {
        return sequencePresent(futureals).map(s -> s.map(mapper)
                .reduce(reducer));
    }
    /**
     * Accumulate the results only from those Lazys which have a value present, using the
     * supplied Monoid (a combining BiFunction/BinaryOperator and identity element that takes two
     * input values of the same type and returns the combined result) {@see cyclops2.Monoids }.
     *
     * <pre>
     * {@code
     *  Lazy<Integer> just = Lazy.of(10);
    Lazy<Integer> none = Lazy.empty();

     *  Lazy<String> opts = Lazy.accumulateJust(Monoids.stringConcat,ListX.of(just, none, Lazy.of(1)),
    );
    //Lazy.of("101")
     *
     * }
     * </pre>
     *
     * @param futureals Lazys to accumulate
     * @param reducer Monoid to combine values from each Lazy
     * @return Lazy with reduced value
     */
    public static <T> Lazy<T> accumulatePresent(final Monoid<T> reducer, final CollectionX<Lazy<T>> futureals) {
        return sequencePresent(futureals).map(s -> s
                .reduce(reducer));
    }

    /**
     * Combine an Lazy with the provided value using the supplied BiFunction
     *
     * <pre>
     * {@code
     *  Lazys.combine(Lazy.of(10),Maybe.just(20), this::add)
     *  //Lazy[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     * @param f Lazy to combine with a value
     * @param v Value to combine
     * @param fn Combining function
     * @return Lazy combined with supplied value
     */
    public static <T1, T2, R> Lazy<R> combine(final Lazy<? extends T1> f, final Value<? extends T2> v,
                                              final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.eval(ToCyclopsReact.eval(f)
                .combine(v, fn)));
    }
    /**
     * Combine an Lazy with the provided Lazy using the supplied BiFunction
     *
     * <pre>
     * {@code
     *  Lazys.combine(Lazy.of(10),Lazy.of(20), this::add)
     *  //Lazy[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     *
     * @param f Lazy to combine with a value
     * @param v Lazy to combine
     * @param fn Combining function
     * @return Lazy combined with supplied value, or empty Lazy if no value present
     */
    public static <T1, T2, R> Lazy<R> combine(final Lazy<? extends T1> f, final Lazy<? extends T2> v,
                                              final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return combine(f,ToCyclopsReact.eval(v),fn);
    }

    /**
     * Combine an Lazy with the provided Iterable (selecting one element if present) using the supplied BiFunction
     * <pre>
     * {@code
     *  Lazys.zip(Lazy.of(10),Arrays.asList(20), this::add)
     *  //Lazy[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     * @param f Lazy to combine with first element in Iterable (if present)
     * @param v Iterable to combine
     * @param fn Combining function
     * @return Lazy combined with supplied Iterable, or empty Lazy if no value present
     */
    public static <T1, T2, R> Lazy<R> zip(final Lazy<? extends T1> f, final Iterable<? extends T2> v,
                                          final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.eval(ToCyclopsReact.eval(f)
                .zip(v, fn)));
    }

    /**
     * Combine an Lazy with the provided Publisher (selecting one element if present) using the supplied BiFunction
     * <pre>
     * {@code
     *  Lazys.zip(Flux.just(10),Lazy.of(10), this::add)
     *  //Lazy[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     *
     * @param p Publisher to combine
     * @param f  Lazy to combine with
     * @param fn Combining function
     * @return Lazy combined with supplied Publisher, or empty Lazy if no value present
     */
    public static <T1, T2, R> Lazy<R> zip(final Publisher<? extends T2> p, final Lazy<? extends T1> f,
                                          final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.eval(ToCyclopsReact.eval(f)
                .zipP(p, fn)));
    }
    /**
     * Narrow covariant type parameter
     *
     * @param futureal Lazy with covariant type parameter
     * @return Narrowed Lazy
     */
    public static <T> Lazy<T> narrow(final Lazy<? extends T> futureal) {
        return (Lazy<T>) futureal;
    }
    @UtilityClass
    public static class Instances {


        /**
         *
         * Transform a lazy, mulitplying every element by 2
         *
         * <pre>
         * {@code
         *  LazyKind<Integer> lazy = Instances.functor().map(i->i*2, LazyKind.widen(Lazy.of(()->1));
         *
         *  //[2]
         *
         *
         * }
         * </pre>
         *
         * An example fluent api working with Lazys
         * <pre>
         * {@code
         *   LazyKind<Integer> lazy = Lazys.unit()
        .unit("hello")
        .then(h->Lazys.functor().map((String v) ->v.length(), h))
        .convert(LazyKind::narrowK);
         *
         * }
         * </pre>
         *
         *
         * @return A functor for Lazys
         */
        public static <T,R>Functor<LazyKind.µ> functor(){
            BiFunction<LazyKind<T>,Function<? super T, ? extends R>,LazyKind<R>> map = Instances::map;
            return General.functor(map);
        }
        /**
         * <pre>
         * {@code
         * LazyKind<String> lazy = Lazys.unit()
        .unit("hello")
        .convert(LazyKind::narrowK);

        //Lazy.just("hello"))
         *
         * }
         * </pre>
         *
         *
         * @return A factory for Lazys
         */
        public static <T> Pure<LazyKind.µ> unit(){
            return General.<LazyKind.µ,T>unit(Instances::of);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.LazyKind.widen;
         * import static com.aol.cyclops.util.function.Lambda.l1;
         * import static java.util.Lazy.just;
         *
        Lazys.zippingApplicative()
        .ap(widen(asLazy(l1(this::multiplyByTwo))),widen(asLazy(1,2,3)));
         *
         * //[2,4,6]
         * }
         * </pre>
         *
         *
         * Example fluent API
         * <pre>
         * {@code
         * LazyKind<Function<Integer,Integer>> lazyFn =Lazys.unit()
         *                                                  .unit(Lambda.l1((Integer i) ->i*2))
         *                                                  .convert(LazyKind::narrowK);

        LazyKind<Integer> lazy = Lazys.unit()
        .unit("hello")
        .then(h->Lazys.functor().map((String v) ->v.length(), h))
        .then(h->Lazys.applicative().ap(lazyFn, h))
        .convert(LazyKind::narrowK);

        //Lazy.just("hello".length()*2))
         *
         * }
         * </pre>
         *
         *
         * @return A zipper for Lazys
         */
        public static <T,R> Applicative<LazyKind.µ> applicative(){
            BiFunction<LazyKind< Function<T, R>>,LazyKind<T>,LazyKind<R>> ap = Instances::ap;
            return General.applicative(functor(), unit(), ap);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.LazyKind.widen;
         * LazyKind<Integer> lazy  = Lazys.monad()
        .flatMap(i->widen(LazyX.range(0,i)), widen(Lazy.just(1,2,3)))
        .convert(LazyKind::narrowK);
         * }
         * </pre>
         *
         * Example fluent API
         * <pre>
         * {@code
         *    LazyKind<Integer> lazy = Lazys.unit()
        .unit("hello")
        .then(h->Lazys.monad().flatMap((String v) ->Lazys.unit().unit(v.length()), h))
        .convert(LazyKind::narrowK);

        //Lazy.just("hello".length())
         *
         * }
         * </pre>
         *
         * @return Type class with monad functions for Lazys
         */
        public static <T,R> Monad<LazyKind.µ> monad(){

            BiFunction<Higher<LazyKind.µ,T>,Function<? super T, ? extends Higher<LazyKind.µ,R>>,Higher<LazyKind.µ,R>> flatMap = Instances::flatMap;
            return General.monad(applicative(), flatMap);
        }
        /**
         *
         * <pre>
         * {@code
         *  LazyKind<String> lazy = Lazys.unit()
        .unit("hello")
        .then(h->Lazys.monadZero().filter((String t)->t.startsWith("he"), h))
        .convert(LazyKind::narrowK);

        //Lazy.just("hello"));
         *
         * }
         * </pre>
         *
         *
         * @return A filterable monad (with default value)
         */
        public static <T,R> MonadZero<LazyKind.µ> monadZero(){

            return General.monadZero(monad(), LazyKind.of(()->null));
        }
        /**
         * <pre>
         * {@code
         *  LazyKind<Integer> lazy = Lazys.<Integer>monadPlus()
        .plus(LazyKind.widen(Lazy.just()), LazyKind.widen(Lazy.just(10)))
        .convert(LazyKind::narrowK);
        //Lazy.just(10))
         *
         * }
         * </pre>
         * @return Type class for combining Lazys by concatenation
         */
        public static <T> MonadPlus<LazyKind.µ> monadPlus(){
            Monoid<LazyKind<T>> m = Monoid.of( LazyKind.of(()->null),
                    (a,b)-> a.get()==null? b: a);
            Monoid<Higher<LazyKind.µ,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }
        /**
         *
         * <pre>
         * {@code
         *  Monoid<LazyKind<Integer>> m = Monoid.of(LazyKind.widen(Lazy.just()), (a,b)->a.isEmpty() ? b : a);
        LazyKind<Integer> lazy = Lazys.<Integer>monadPlus(m)
        .plus(LazyKind.widen(Lazy.just(5)), LazyKind.widen(Lazy.just(10)))
        .convert(LazyKind::narrowK);
        //Lazy[5]
         *
         * }
         * </pre>
         *
         * @param m Monoid to use for combining Lazys
         * @return Type class for combining Lazys
         */
        public static <T> MonadPlus<LazyKind.µ> monadPlus(Monoid<LazyKind<T>> m){
            Monoid<Higher<LazyKind.µ,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }

        /**
         * @return Type class for traversables with traverse / sequence operations
         */
        public static <C2,T> Traverse<LazyKind.µ> traverse(){

            return General.traverseByTraverse(applicative(), Instances::traverseA);
        }

        /**
         *
         * <pre>
         * {@code
         * int sum  = Lazys.foldable()
        .foldLeft(0, (a,b)->a+b, LazyKind.widen(Lazy.just(1)));

        //1
         *
         * }
         * </pre>
         *
         *
         * @return Type class for folding / reduction operations
         */
        public static <T> Foldable<LazyKind.µ> foldable(){
            BiFunction<Monoid<T>,Higher<LazyKind.µ,T>,T> foldRightFn =  (m, l)-> LazyKind.narrow(l).getOrElse(m.zero());
            BiFunction<Monoid<T>,Higher<LazyKind.µ,T>,T> foldLeftFn = (m, l)-> LazyKind.narrow(l).getOrElse(m.zero());
            return General.foldable(foldRightFn, foldLeftFn);
        }
        public static <T> Comonad<LazyKind.µ> comonad(){
            Function<? super Higher<LazyKind.µ, T>, ? extends T> extractFn = maybe -> maybe.convert(LazyKind::narrow).get();
            return General.comonad(functor(), unit(), extractFn);
        }

        private <T> LazyKind<T> of(T value){
            return LazyKind.widen(Lazy.of(()->value));
        }
        private static <T,R> LazyKind<R> ap(LazyKind<Function< T, R>> lt, LazyKind<T> lazy){
            return LazyKind.widen(FromCyclopsReact.lazy(ToCyclopsReact.eval(lt.narrow()).combine(ToCyclopsReact.eval(lazy.narrow()), (a, b)->a.apply(b))));

        }
        private static <T,R> Higher<LazyKind.µ,R> flatMap(Higher<LazyKind.µ,T> lt, Function<? super T, ? extends  Higher<LazyKind.µ,R>> fn){
            return LazyKind.widen(LazyKind.narrowEval(lt).flatMap(fn.andThen(LazyKind::narrowEval)));
        }
        private static <T,R> LazyKind<R> map(LazyKind<T> lt, Function<? super T, ? extends R> fn){
            return LazyKind.widen(LazyKind.narrow(lt).map(fn));
        }


        private static <C2,T,R> Higher<C2, Higher<LazyKind.µ, R>> traverseA(Applicative<C2> applicative, Function<? super T, ? extends Higher<C2, R>> fn,
                                                                            Higher<LazyKind.µ, T> ds){

            Lazy<T> eval = LazyKind.narrow(ds);
            Higher<C2, R> ds2 = fn.apply(eval.get());
            return applicative.map(v-> LazyKind.of(()->v), ds2);

        }

    }

}
