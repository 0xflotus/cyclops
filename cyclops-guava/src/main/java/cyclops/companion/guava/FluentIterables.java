package cyclops.companion.guava;

import com.aol.cyclops.guava.hkt.OptionalKind;
import cyclops.companion.CompletableFutures;
import cyclops.companion.CompletableFutures.CompletableFutureKind;
import cyclops.companion.Streams;
import cyclops.companion.Streams.StreamKind;
import cyclops.control.Eval;
import cyclops.control.Maybe;
import cyclops.control.Reader;
import cyclops.control.Xor;
import cyclops.monads.*;
import cyclops.monads.GuavaWitness.fluentIterable;
import com.aol.cyclops.guava.hkt.FluentIterableKind;
import com.aol.cyclops2.hkt.Higher;
import com.aol.cyclops2.types.anyM.AnyMSeq;
import com.google.common.collect.FluentIterable;
import cyclops.function.Fn3;
import cyclops.function.Fn4;
import cyclops.function.Monoid;
import cyclops.monads.Witness.*;
import cyclops.monads.transformers.ListT;
import cyclops.monads.transformers.StreamT;
import cyclops.stream.ReactiveSeq;
import cyclops.typeclasses.*;
import cyclops.typeclasses.comonad.Comonad;
import cyclops.typeclasses.foldable.Foldable;
import cyclops.typeclasses.foldable.Unfoldable;
import cyclops.typeclasses.functor.Functor;
import cyclops.typeclasses.instances.General;
import cyclops.typeclasses.monad.*;
import io.vavr.collection.List;
import io.vavr.collection.Stream;
import lombok.experimental.UtilityClass;
import org.jooq.lambda.tuple.Tuple2;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.*;

import static com.aol.cyclops.guava.hkt.FluentIterableKind.widen;

public class FluentIterables {
    public static  <W1,T> Coproduct<W1,fluentIterable,T> coproduct(FluentIterable<T> type, InstanceDefinitions<W1> def1){
        return Coproduct.of(Xor.primary(widen(type)),def1, Instances.definitions());
    }
    public static  <W1,T> Coproduct<W1,fluentIterable,T> coproduct(InstanceDefinitions<W1> def1,T... values){
        return coproduct(FluentIterable.of(values),def1);
    }
    public static  <W1 extends WitnessType<W1>,T> XorM<W1,fluentIterable,T> xorM(FluentIterable<T> type){
        return XorM.right(anyM(type));
    }
    public static  <W1 extends WitnessType<W1>,T> XorM<W1,fluentIterable,T> xorM(T... values){
        return xorM(FluentIterable.of(values));
    }
    public static <T,W extends WitnessType<W>> StreamT<W, T> liftM(FluentIterable<T> opt, W witness) {
        return StreamT.of(witness.adapter().unit(ReactiveSeq.fromIterable(opt)));
    }
    /**
     * <pre>
     * {@code
     * ToCyclopsReact.anyM(FluentIterable.of(new String[]{"hello world"}))
    .transform(String::toUpperCase)
    .transformAndConcat(i->AnyMonads.anyM(java.util.stream.Stream.of(i)))
    .toSequence()
    .toList()
     * }
     *  //[HELLO WORLD]
     * </pre>
     *
     * @param streamM to construct AnyM from
     * @return AnyM
     */
    public static <T> AnyMSeq<fluentIterable,T> anyM(FluentIterable<T> streamM) {
        return AnyM.ofSeq(streamM, fluentIterable.INSTANCE);
    }

    /**
     * Perform a For Comprehension over a FluentIterable, accepting 3 generating functions.
     * This results in a four level nested internal iteration over the provided Publishers.
     *
     *  <pre>
     * {@code
     *
     *   import static cyclops.FluentIterables.forEach4;
     *
    forEach4(IntFluentIterable.range(1,10).boxed(),
    a-> FluentIterable.iterate(a,i->i+1).limit(10),
    (a,b) -> FluentIterable.<Integer>of(a+b),
    (a,b,c) -> FluentIterable.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested FluentIterable
     * @param value3 Nested FluentIterable
     * @param value4 Nested FluentIterable
     * @param yieldingFunction  Generates a result per combination
     * @return FluentIterable with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> FluentIterable<R> forEach4(FluentIterable<? extends T1> value1,
                                                                         Function<? super T1, ? extends FluentIterable<R1>> value2,
                                                                         BiFunction<? super T1, ? super R1, ? extends FluentIterable<R2>> value3,
                                                                         Fn3<? super T1, ? super R1, ? super R2, ? extends FluentIterable<R3>> value4,
                                                                         Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.transformAndConcat(ina -> {
                FluentIterable<R2> b = value3.apply(in,ina);
                return b.transformAndConcat(inb -> {
                    FluentIterable<R3> c = value4.apply(in,ina,inb);
                    return c.transform(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

    /**
     * Perform a For Comprehension over a FluentIterable, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     *  import static com.aol.cyclops2.reactor.FluentIterablees.forEach4;
     *
     *  forEach4(IntFluentIterable.range(1,10).boxed(),
    a-> FluentIterable.iterate(a,i->i+1).limit(10),
    (a,b) -> FluentIterable.<Integer>just(a+b),
    (a,b,c) -> FluentIterable.<Integer>just(a+b+c),
    (a,b,c,d) -> a+b+c+d <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested FluentIterable
     * @param value3 Nested FluentIterable
     * @param value4 Nested FluentIterable
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return FluentIterable with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> FluentIterable<R> forEach4(FluentIterable<? extends T1> value1,
                                                                         Function<? super T1, ? extends FluentIterable<R1>> value2,
                                                                         BiFunction<? super T1, ? super R1, ? extends FluentIterable<R2>> value3,
                                                                         Fn3<? super T1, ? super R1, ? super R2, ? extends FluentIterable<R3>> value4,
                                                                         Fn4<? super T1, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
                                                                         Fn4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {


        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.transformAndConcat(ina -> {
                FluentIterable<R2> b = value3.apply(in,ina);
                return b.transformAndConcat(inb -> {
                    FluentIterable<R3> c = value4.apply(in,ina,inb);
                    return c.filter(in2->filterFunction.apply(in,ina,inb,in2))
                            .transform(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });
    }

    /**
     * Perform a For Comprehension over a FluentIterable, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     * import static FluentIterables.forEach3;
     *
     * forEach(IntFluentIterable.range(1,10).boxed(),
    a-> FluentIterable.iterate(a,i->i+1).limit(10),
    (a,b) -> FluentIterable.<Integer>of(a+b),
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested FluentIterable
     * @param value3 Nested FluentIterable
     * @param yieldingFunction Generates a result per combination
     * @return FluentIterable with an element per combination of nested publishers generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> FluentIterable<R> forEach3(FluentIterable<? extends T1> value1,
                                                                 Function<? super T1, ? extends FluentIterable<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends FluentIterable<R2>> value3,
                                                                 Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.transformAndConcat(ina -> {
                FluentIterable<R2> b = value3.apply(in,ina);
                return b.transform(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });


    }

    /**
     * Perform a For Comprehension over a FluentIterable, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Publishers.
     * <pre>
     * {@code
     *
     * import static FluentIterables.forEach;
     *
     * forEach(IntFluentIterable.range(1,10).boxed(),
    a-> FluentIterable.iterate(a,i->i+1).limit(10),
    (a,b) -> FluentIterable.<Integer>of(a+b),
    (a,b,c) ->a+b+c<10,
    Tuple::tuple)
    .toFluentIterableX();
     * }
     * </pre>
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested publisher
     * @param value3 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T1, T2, R1, R2, R> FluentIterable<R> forEach3(FluentIterable<? extends T1> value1,
                                                                 Function<? super T1, ? extends FluentIterable<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends FluentIterable<R2>> value3,
                                                                 Fn3<? super T1, ? super R1, ? super R2, Boolean> filterFunction,
                                                                 Fn3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {


        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.transformAndConcat(ina -> {
                FluentIterable<R2> b = value3.apply(in,ina);
                return b.filter(in2->filterFunction.apply(in,ina,in2))
                        .transform(in2 -> yieldingFunction.apply(in, ina, in2));
            });



        });
    }

    /**
     * Perform a For Comprehension over a FluentIterable, accepting an additonal generating function.
     * This results in a two level nested internal iteration over the provided Publishers.
     *
     * <pre>
     * {@code
     *
     *  import static FluentIterables.forEach2;
     *  forEach(IntFluentIterable.range(1, 10).boxed(),
     *          i -> FluentIterable.range(i, 10), Tuple::tuple)
    .forEach(System.out::println);

    //(1, 1)
    (1, 2)
    (1, 3)
    (1, 4)
    ...
     *
     * }</pre>
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested publisher
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> FluentIterable<R> forEach2(FluentIterable<? extends T> value1,
                                                        Function<? super T, FluentIterable<R1>> value2,
                                                        BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.transform(in2 -> yieldingFunction.apply(in,  in2));
        });

    }

    /**
     *
     * <pre>
     * {@code
     *
     *   import static FluentIterables.forEach2;
     *
     *   forEach(IntFluentIterable.range(1, 10).boxed(),
     *           i -> FluentIterable.range(i, 10),
     *           (a,b) -> a>2 && b<10,
     *           Tuple::tuple)
    .forEach(System.out::println);

    //(3, 3)
    (3, 4)
    (3, 5)
    (3, 6)
    (3, 7)
    (3, 8)
    (3, 9)
    ...

     *
     * }</pre>
     *
     *
     * @param value1 top level FluentIterable
     * @param value2 Nested publisher
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return
     */
    public static <T, R1, R> FluentIterable<R> forEach2(FluentIterable<? extends T> value1,
                                                        Function<? super T, ? extends FluentIterable<R1>> value2,
                                                        BiFunction<? super T, ? super R1, Boolean> filterFunction,
                                                        BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {


        return value1.transformAndConcat(in -> {

            FluentIterable<R1> a = value2.apply(in);
            return a.filter(in2->filterFunction.apply(in,in2))
                    .transform(in2 -> yieldingFunction.apply(in,  in2));
        });
    }
    public static <T> Active<fluentIterable,T> allTypeclasses(FluentIterable<T> array){
        return Active.of(widen(array), FluentIterables.Instances.definitions());
    }
    public static <T,W2,R> Nested<fluentIterable,W2,R> mapM(FluentIterable<T> array, Function<? super T,? extends Higher<W2,R>> fn, InstanceDefinitions<W2> defs){
        FluentIterable<Higher<W2, R>> e = array.transform(x->fn.apply(x));
        FluentIterableKind<Higher<W2, R>> lk = widen(e);
        return Nested.of(lk, FluentIterables.Instances.definitions(), defs);
    }
    /**
     * Companion class for creating Type Class instances for working with FluentIterables
     *
     */
    @UtilityClass
    public class Instances {

        public static InstanceDefinitions<fluentIterable> definitions() {
            return new InstanceDefinitions<fluentIterable>() {

                @Override
                public <T, R> Functor<fluentIterable> functor() {
                    return Instances.functor();
                }

                @Override
                public <T> Pure<fluentIterable> unit() {
                    return Instances.unit();
                }

                @Override
                public <T, R> Applicative<fluentIterable> applicative() {
                    return Instances.zippingApplicative();
                }

                @Override
                public <T, R> Monad<fluentIterable> monad() {
                    return Instances.monad();
                }

                @Override
                public <T, R> Maybe<MonadZero<fluentIterable>> monadZero() {
                    return Maybe.just(Instances.monadZero());
                }

                @Override
                public <T> Maybe<MonadPlus<fluentIterable>> monadPlus() {
                    return Maybe.just(Instances.monadPlus());
                }

                @Override
                public <T> Maybe<MonadPlus<fluentIterable>> monadPlus(Monoid<Higher<fluentIterable, T>> m) {
                    return Maybe.just(Instances.monadPlus(m));
                }

                @Override
                public <C2, T> Maybe<Traverse<fluentIterable>> traverse() {
                    return Maybe.just(Instances.traverse());
                }

                @Override
                public <T> Maybe<Foldable<fluentIterable>> foldable() {
                    return Maybe.just(Instances.foldable());
                }

                @Override
                public <T> Maybe<Comonad<fluentIterable>> comonad() {
                    return Maybe.none();
                }

                @Override
                public <T> Maybe<Unfoldable<fluentIterable>> unfoldable() {
                    return Maybe.just(Instances.unfoldable());
                }
            };
        }
        /**
         *
         * Transform a flux, mulitplying every element by 2
         *
         * <pre>
         * {@code
         *  FluentIterableKind<Integer> flux = FluentIterables.functor().transform(i->i*2, FluentIterableKind.widen(FluentIterable.of(1,2,3));
         *
         *  //[2,4,6]
         *
         *
         * }
         * </pre>
         *
         * An example fluent api working with FluentIterables
         * <pre>
         * {@code
         *   FluentIterableKind<Integer> flux = FluentIterables.unit()
        .unit("hello")
        .then(h->FluentIterables.functor().transform((String v) ->v.length(), h))
        .convert(FluentIterableKind::narrowK);
         *
         * }
         * </pre>
         *
         *
         * @return A functor for FluentIterables
         */
        public static <T,R>Functor<fluentIterable> functor(){
            BiFunction<FluentIterableKind<T>,Function<? super T, ? extends R>,FluentIterableKind<R>> transform = Instances::transform;
            return General.functor(transform);
        }
        /**
         * <pre>
         * {@code
         * FluentIterableKind<String> flux = FluentIterables.unit()
        .unit("hello")
        .convert(FluentIterableKind::narrowK);

        //FluentIterable.of("hello"))
         *
         * }
         * </pre>
         *
         *
         * @return A factory for FluentIterables
         */
        public static <T> Pure<fluentIterable> unit(){
            return General.<fluentIterable,T>unit(Instances::of);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.FluentIterableKind.widen;
         * import static com.aol.cyclops.util.function.Lambda.l1;
         *
        FluentIterables.zippingApplicative()
        .ap(widen(FluentIterable.of(l1(this::multiplyByTwo))),widen(FluentIterable.of(1,2,3)));
         *
         * //[2,4,6]
         * }
         * </pre>
         *
         *
         * Example fluent API
         * <pre>
         * {@code
         * FluentIterableKind<Function<Integer,Integer>> fluxFn =FluentIterables.unit()
         *                                                  .unit(Lambda.l1((Integer i) ->i*2))
         *                                                  .convert(FluentIterableKind::narrowK);

        FluentIterableKind<Integer> flux = FluentIterables.unit()
        .unit("hello")
        .then(h->FluentIterables.functor().transform((String v) ->v.length(), h))
        .then(h->FluentIterables.zippingApplicative().ap(fluxFn, h))
        .convert(FluentIterableKind::narrowK);

        //FluentIterable.of("hello".length()*2))
         *
         * }
         * </pre>
         *
         *
         * @return A zipper for FluentIterables
         */
        public static <T,R> Applicative<fluentIterable> zippingApplicative(){
            BiFunction<FluentIterableKind< Function<T, R>>,FluentIterableKind<T>,FluentIterableKind<R>> ap = Instances::ap;
            return General.applicative(functor(), unit(), ap);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.FluentIterableKind.widen;
         * FluentIterableKind<Integer> flux  = FluentIterables.monad()
        .transformAndConcat(i->widen(FluentIterableX.range(0,i)), widen(FluentIterable.of(1,2,3)))
        .convert(FluentIterableKind::narrowK);
         * }
         * </pre>
         *
         * Example fluent API
         * <pre>
         * {@code
         *    FluentIterableKind<Integer> flux = FluentIterables.unit()
        .unit("hello")
        .then(h->FluentIterables.monad().transformAndConcat((String v) ->FluentIterables.unit().unit(v.length()), h))
        .convert(FluentIterableKind::narrowK);

        //FluentIterable.of("hello".length())
         *
         * }
         * </pre>
         *
         * @return Type class with monad functions for FluentIterables
         */
        public static <T,R> Monad<fluentIterable> monad(){

            BiFunction<Higher<fluentIterable,T>,Function<? super T, ? extends Higher<fluentIterable,R>>,Higher<fluentIterable,R>> transformAndConcat = Instances::transformAndConcat;
            return General.monad(zippingApplicative(), transformAndConcat);
        }
        /**
         *
         * <pre>
         * {@code
         *  FluentIterableKind<String> flux = FluentIterables.unit()
        .unit("hello")
        .then(h->FluentIterables.monadZero().filter((String t)->t.startsWith("he"), h))
        .convert(FluentIterableKind::narrowK);

        //FluentIterable.of("hello"));
         *
         * }
         * </pre>
         *
         *
         * @return A filterable monad (with default value)
         */
        public static <T,R> MonadZero<fluentIterable> monadZero(){
            BiFunction<Higher<fluentIterable,T>,Predicate<? super T>,Higher<fluentIterable,T>> filter = Instances::filter;
            Supplier<Higher<fluentIterable, T>> zero = ()-> widen(FluentIterable.of());
            return General.<fluentIterable,T,R>monadZero(monad(), zero,filter);
        }
        /**
         * <pre>
         * {@code
         *  FluentIterableKind<Integer> flux = FluentIterables.<Integer>monadPlus()
        .plus(FluentIterableKind.widen(FluentIterable.of()), FluentIterableKind.widen(FluentIterable.of(10)))
        .convert(FluentIterableKind::narrowK);
        //FluentIterable.of(10))
         *
         * }
         * </pre>
         * @return Type class for combining FluentIterables by concatenation
         */
        public static <T> MonadPlus<fluentIterable> monadPlus(){
            Monoid<FluentIterableKind<T>> m = Monoid.of(widen(FluentIterable.<T>of()), Instances::concat);
            Monoid<Higher<fluentIterable,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }
        /**
         *
         * <pre>
         * {@code
         *  Monoid<FluentIterableKind<Integer>> m = Monoid.of(FluentIterableKind.widen(FluentIterable.of()), (a,b)->a.isEmpty() ? b : a);
        FluentIterableKind<Integer> flux = FluentIterables.<Integer>monadPlus(m)
        .plus(FluentIterableKind.widen(FluentIterable.of(5)), FluentIterableKind.widen(FluentIterable.of(10)))
        .convert(FluentIterableKind::narrowK);
        //FluentIterable.of(5))
         *
         * }
         * </pre>
         *
         * @param m Monoid to use for combining FluentIterables
         * @return Type class for combining FluentIterables
         */
        public static <T> MonadPlus<fluentIterable> monadPlusK(Monoid<FluentIterableKind<T>> m){
            Monoid<Higher<fluentIterable,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }
        public static <T> MonadPlus<fluentIterable> monadPlus(Monoid<Higher<fluentIterable,T>> m){
            Monoid<Higher<fluentIterable,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }

        /**
         * @return Type class for traversables with traverse / sequence operations
         */
        public static <C2,T> Traverse<fluentIterable> traverse(){
            BiFunction<Applicative<C2>,FluentIterableKind<Higher<C2, T>>,Higher<C2, FluentIterableKind<T>>> sequenceFn = (ap, flux) -> {

                Higher<C2,FluentIterableKind<T>> identity = ap.unit(widen(FluentIterable.of()));

                BiFunction<Higher<C2,FluentIterableKind<T>>,Higher<C2,T>,Higher<C2,FluentIterableKind<T>>> combineToFluentIterable =   (acc, next) -> ap.apBiFn(ap.unit((a, b) -> widen(FluentIterable.concat(a,FluentIterable.of(b)))),acc,next);

                BinaryOperator<Higher<C2,FluentIterableKind<T>>> combineFluentIterables = (a, b)-> ap.apBiFn(ap.unit((l1, l2)-> { return widen(FluentIterable.concat(l1.narrow(),l2.narrow()));}),a,b); ;

                return ReactiveSeq.fromIterable(flux).reduce(identity,
                        combineToFluentIterable,
                        combineFluentIterables);


            };
            BiFunction<Applicative<C2>,Higher<fluentIterable,Higher<C2, T>>,Higher<C2, Higher<fluentIterable,T>>> sequenceNarrow  =
                    (a,b) -> FluentIterableKind.widen2(sequenceFn.apply(a, FluentIterableKind.narrowK(b)));
            return General.traverse(zippingApplicative(), sequenceNarrow);
        }

        /**
         *
         * <pre>
         * {@code
         * int sum  = FluentIterables.foldable()
        .foldLeft(0, (a,b)->a+b, FluentIterableKind.widen(FluentIterable.of(1,2,3,4)));

        //10
         *
         * }
         * </pre>
         *
         *
         * @return Type class for folding / reduction operations
         */
        public static <T> Foldable<fluentIterable> foldable(){
            BiFunction<Monoid<T>,Higher<fluentIterable,T>,T> foldRightFn =  (m, l)-> ReactiveSeq.fromPublisher(FluentIterableKind.narrowK(l)).foldRight(m);
            BiFunction<Monoid<T>,Higher<fluentIterable,T>,T> foldLeftFn = (m, l)-> ReactiveSeq.fromPublisher(FluentIterableKind.narrowK(l)).reduce(m);
            return General.foldable(foldRightFn, foldLeftFn);
        }

        private static  <T> FluentIterableKind<T> concat(FluentIterableKind<T> l1, FluentIterableKind<T> l2){
            return widen(FluentIterable.concat(l1,l2));
        }
        private <T> FluentIterableKind<T> of(T value){
            return widen(FluentIterable.of(value));
        }
        private static <T,R> FluentIterableKind<R> ap(FluentIterableKind<Function< T, R>> lt, FluentIterableKind<T> flux){
            return widen(lt.toReactiveSeq().zip(flux,(a, b)->a.apply(b)));
        }
        private static <T,R> Higher<fluentIterable,R> transformAndConcat(Higher<fluentIterable,T> lt, Function<? super T, ? extends  Higher<fluentIterable,R>> fn){
            return widen(FluentIterableKind.narrowK(lt).transformAndConcat(i->fn.andThen(FluentIterableKind::narrowK).apply(i)));
        }
        private static <T,R> FluentIterableKind<R> transform(FluentIterableKind<T> lt, Function<? super T, ? extends R> fn){
            return widen(lt.transform(i->fn.apply(i)));
        }
        private static <T> FluentIterableKind<T> filter(Higher<fluentIterable,T> lt, Predicate<? super T> fn){
            return widen(FluentIterableKind.narrow(lt).filter(i->fn.test(i)));
        }
        public static Unfoldable<fluentIterable> unfoldable(){
            return new Unfoldable<fluentIterable>() {
                @Override
                public <R, T> Higher<fluentIterable, R> unfold(T b, Function<? super T, Optional<Tuple2<R, T>>> fn) {
                    return widen(FluentIterable.from(ReactiveSeq.unfold(b,fn)));

                }
            };
        }
    }

    public static interface FluentIterableNested {
        public static <T> Nested<fluentIterable,GuavaWitness.optional,T> optional(FluentIterable<com.google.common.base.Optional<T>> nested){
            FluentIterable<OptionalKind<T>> f = nested.transform(o -> OptionalKind.widen(o));
            FluentIterableKind<OptionalKind<T>> x = widen(f);
            FluentIterableKind<Higher<GuavaWitness.optional,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(), Optionals.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,fluentIterable,T> fluentIterable(FluentIterable<FluentIterable<T>> nested){
            FluentIterable<FluentIterableKind<T>> f = nested.transform(o -> FluentIterableKind.widen(o));
            FluentIterableKind<FluentIterableKind<T>> x = widen(f);
            FluentIterableKind<Higher<fluentIterable,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(), Instances.definitions());
        }



        public static <T> Nested<fluentIterable,reactiveSeq,T> reactiveSeq(FluentIterable<ReactiveSeq<T>> nested){
            FluentIterableKind<ReactiveSeq<T>> x = widen(nested);
            FluentIterableKind<Higher<reactiveSeq,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),ReactiveSeq.Instances.definitions());
        }

        public static <T> Nested<fluentIterable,maybe,T> maybe(FluentIterable<Maybe<T>> nested){
            FluentIterableKind<Maybe<T>> x = widen(nested);
            FluentIterableKind<Higher<maybe,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),Maybe.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,eval,T> eval(FluentIterable<Eval<T>> nested){
            FluentIterableKind<Eval<T>> x = widen(nested);
            FluentIterableKind<Higher<eval,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),Eval.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,Witness.future,T> future(FluentIterable<cyclops.async.Future<T>> nested){
            FluentIterableKind<cyclops.async.Future<T>> x = widen(nested);
            FluentIterableKind<Higher<Witness.future,T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),cyclops.async.Future.Instances.definitions());
        }
        public static <S, P> Nested<fluentIterable,Higher<xor,S>, P> xor(FluentIterable<Xor<S, P>> nested){
            FluentIterableKind<Xor<S, P>> x = widen(nested);
            FluentIterableKind<Higher<Higher<xor,S>, P>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),Xor.Instances.definitions());
        }
        public static <S,T> Nested<fluentIterable,Higher<reader,S>, T> reader(FluentIterable<Reader<S, T>> nested){
            FluentIterableKind<Reader<S, T>> x = widen(nested);
            FluentIterableKind<Higher<Higher<reader,S>, T>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),Reader.Instances.definitions());
        }
        public static <S extends Throwable, P> Nested<fluentIterable,Higher<Witness.tryType,S>, P> cyclopsTry(FluentIterable<cyclops.control.Try<P, S>> nested){
            FluentIterableKind<cyclops.control.Try<P, S>> x = widen(nested);
            FluentIterableKind<Higher<Higher<Witness.tryType,S>, P>> y = (FluentIterableKind)x;
            return Nested.of(y,Instances.definitions(),cyclops.control.Try.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,Witness.optional,T> javaOptional(FluentIterable<Optional<T>> nested){
            FluentIterable<cyclops.companion.Optionals.OptionalKind<T>> f = nested.transform(o -> cyclops.companion.Optionals.OptionalKind.widen(o));
            FluentIterableKind<cyclops.companion.Optionals.OptionalKind<T>> x = FluentIterableKind.widen(f);

            FluentIterableKind<Higher<Witness.optional,T>> y = (FluentIterableKind)x;
            return Nested.of(y, Instances.definitions(), cyclops.companion.Optionals.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,completableFuture,T> javaCompletableFuture(FluentIterable<CompletableFuture<T>> nested){
            FluentIterable<CompletableFutureKind<T>> f = nested.transform(o -> CompletableFutureKind.widen(o));
            FluentIterableKind<CompletableFutureKind<T>> x = FluentIterableKind.widen(f);
            FluentIterableKind<Higher<completableFuture,T>> y = (FluentIterableKind)x;
            return Nested.of(y, Instances.definitions(), CompletableFutures.Instances.definitions());
        }
        public static <T> Nested<fluentIterable,Witness.stream,T> javaStream(FluentIterable<java.util.stream.Stream<T>> nested){
            FluentIterable<StreamKind<T>> f = nested.transform(o -> StreamKind.widen(o));
            FluentIterableKind<StreamKind<T>> x = FluentIterableKind.widen(f);
            FluentIterableKind<Higher<Witness.stream,T>> y = (FluentIterableKind)x;
            return Nested.of(y, Instances.definitions(), cyclops.companion.Streams.Instances.definitions());
        }





    }

    public static interface NestedFluentIterable{
        public static <T> Nested<reactiveSeq,fluentIterable,T> reactiveSeq(ReactiveSeq<FluentIterable<T>> nested){
            ReactiveSeq<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);
            return Nested.of(x,ReactiveSeq.Instances.definitions(),Instances.definitions());
        }

        public static <T> Nested<maybe,fluentIterable,T> maybe(Maybe<FluentIterable<T>> nested){
            Maybe<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,Maybe.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<eval,fluentIterable,T> eval(Eval<FluentIterable<T>> nested){
            Eval<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,Eval.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<Witness.future,fluentIterable,T> future(cyclops.async.Future<FluentIterable<T>> nested){
            cyclops.async.Future<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,cyclops.async.Future.Instances.definitions(),Instances.definitions());
        }
        public static <S, P> Nested<Higher<xor,S>,fluentIterable, P> xor(Xor<S, FluentIterable<P>> nested){
            Xor<S, Higher<fluentIterable,P>> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,Xor.Instances.definitions(),Instances.definitions());
        }
        public static <S,T> Nested<Higher<reader,S>,fluentIterable, T> reader(Reader<S, FluentIterable<T>> nested){

            Reader<S, Higher<fluentIterable, T>>  x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,Reader.Instances.definitions(),Instances.definitions());
        }
        public static <S extends Throwable, P> Nested<Higher<Witness.tryType,S>,fluentIterable, P> cyclopsTry(cyclops.control.Try<FluentIterable<P>, S> nested){
            cyclops.control.Try<Higher<fluentIterable,P>, S> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(x,cyclops.control.Try.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<optional,fluentIterable,T> javaOptional(Optional<FluentIterable<T>> nested){
            Optional<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);

            return  Nested.of(cyclops.companion.Optionals.OptionalKind.widen(x), cyclops.companion.Optionals.Instances.definitions(), Instances.definitions());
        }
        public static <T> Nested<completableFuture,fluentIterable,T> javaCompletableFuture(CompletableFuture<FluentIterable<T>> nested){
            CompletableFuture<Higher<fluentIterable,T>> x = nested.thenApply(FluentIterableKind::widenK);

            return Nested.of(CompletableFutureKind.widen(x), CompletableFutures.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<Witness.stream,fluentIterable,T> javaStream(java.util.stream.Stream<FluentIterable<T>> nested){
            java.util.stream.Stream<Higher<fluentIterable,T>> x = nested.map(FluentIterableKind::widenK);

            return Nested.of(StreamKind.widen(x), cyclops.companion.Streams.Instances.definitions(),Instances.definitions());
        }
    }

}
