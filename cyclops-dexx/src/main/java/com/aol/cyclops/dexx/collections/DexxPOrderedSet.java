package com.aol.cyclops.dexx.collections;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

import org.jooq.lambda.tuple.Tuple2;
import org.pcollections.POrderedSet;

import com.aol.cyclops.Reducer;
import com.aol.cyclops.control.ReactiveSeq;
import com.aol.cyclops.reactor.collections.extensions.persistent.LazyPOrderedSetX;
import com.github.andrewoma.dexx.collection.Builder;
import com.github.andrewoma.dexx.collection.TreeSet;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.Wither;
import reactor.core.publisher.Flux;


@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class DexxPOrderedSet<T> extends AbstractSet<T>implements POrderedSet<T> {

    /**
     * Create a LazyPOrderedSetX from a Stream
     * 
     * @param stream to construct a LazyQueueX from
     * @return LazyPOrderedSetX
     */
    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> fromStream(Stream<T> stream) {
        return new LazyPOrderedSetX<T>(
                                  Flux.from(ReactiveSeq.fromStream(stream)), 
                                  DexxPOrderedSet.<T>toPOrderedSet(Comparator.naturalOrder()));
    }

    /**
     * Create a LazyPOrderedSetX that contains the Integers between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPOrderedSetX<Integer> range(int start, int end) {
        return fromStream(ReactiveSeq.range(start, end));
    }

    /**
     * Create a LazyPOrderedSetX that contains the Longs between start and end
     * 
     * @param start
     *            Number of range to start from
     * @param end
     *            Number for range to end at
     * @return Range SetX
     */
    public static LazyPOrderedSetX<Long> rangeLong(long start, long end) {
        return fromStream(ReactiveSeq.rangeLong(start, end));
    }

    /**
     * Unfold a function into a SetX
     * 
     * <pre>
     * {@code 
     *  LazyPOrderedSetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     * 
     * //(1,2,3,4,5)
     * 
     * }</pre>
     * 
     * @param seed Initial value 
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    public static <U, T extends Comparable<? super T>> LazyPOrderedSetX<T> unfold(U seed, Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return fromStream(ReactiveSeq.unfold(seed, unfolder));
    }

    /**
     * Generate a LazyPOrderedSetX from the provided Supplier up to the provided limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> generate(long limit, Supplier<T> s) {

        return fromStream(ReactiveSeq.generate(s)
                                     .limit(limit));
    }

    /**
     * Create a LazyPOrderedSetX by iterative application of a function to an initial element up to the supplied limit number of times
     * 
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> iterate(long limit, final T seed, final UnaryOperator<T> f) {
        return fromStream(ReactiveSeq.iterate(seed, f)
                                     .limit(limit));
    }

    /**
     * <pre>
     * {@code 
     * POrderedSet<Integer> q = JSPOrderedSet.<Integer>toPOrderedSet()
                                     .mapReduce(Stream.of(1,2,3,4));
     * 
     * }
     * </pre>
     * @return Reducer for POrderedSet
     */
    public static <T extends Comparable<? super T>>  Reducer<POrderedSet<T>> toPOrderedSet() {
        return Reducer.<POrderedSet<T>> of(DexxPOrderedSet.emptyPOrderedSet(), (final POrderedSet<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> DexxPOrderedSet.singleton(x));
    }
    
    public static <T>  Reducer<POrderedSet<T>> toPOrderedSet(Comparator<T> ordering) {
        return Reducer.<POrderedSet<T>> of(DexxPOrderedSet.emptyPOrderedSet(ordering), 
                                           (final POrderedSet<T> a) -> b -> a.plusAll(b),
                                      (final T x) -> DexxPOrderedSet.singleton(ordering,x));
    }

    public static <T> DexxPOrderedSet<T> fromSet(TreeSet<T> set) {
        return new DexxPOrderedSet<>(
                                 set);
    }

   
    public static <T extends Comparable<? super T>> DexxPOrderedSet<T> emptyPOrderedSet() {
        return new DexxPOrderedSet<>(new TreeSet<T>(Comparator.naturalOrder()));
    }
    
    public static <T> DexxPOrderedSet<T> emptyPOrderedSet(Comparator<T> comp) {
        TreeSet<T> tree = new TreeSet<T>(comp);
        return new DexxPOrderedSet<T>(tree);
    }

    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> empty() {
        
        return LazyPOrderedSetX.fromPOrderedSet(new DexxPOrderedSet<>(new TreeSet<T>(Comparator.naturalOrder())),
                                                toPOrderedSet());
    }
    public static <T> LazyPOrderedSetX<T> empty(Comparator<T> comp) {
        
        return LazyPOrderedSetX.fromPOrderedSet(new DexxPOrderedSet<>(new TreeSet<T>(comp)),
                                                toPOrderedSet(comp));
    }

    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> singleton(T t) {
        return of(t);
    }
    public static <T> LazyPOrderedSetX<T> singleton(Comparator<T> comp,T t) {
        return of(comp,t);
    }
    public static <T> LazyPOrderedSetX<T> of(Comparator<T> comp,T... t) {

        Builder<T, TreeSet<T>> lb = TreeSet.factory(comp).newBuilder();
       for (T next : t)
           lb.add(next);
       TreeSet<T> vec = lb.build();
       return LazyPOrderedSetX.fromPOrderedSet(new DexxPOrderedSet<>(
                                                       vec),
                                     toPOrderedSet(comp));
   }

    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> of(T... t) {

        return of(Comparator.naturalOrder(),t);
    }
    

    public static <T> LazyPOrderedSetX<T> POrderedSet(TreeSet<T> q) {
        Reducer<POrderedSet<T>> local = toPOrderedSet((Comparator<T>)q.comparator());
        return LazyPOrderedSetX.fromPOrderedSet(new DexxPOrderedSet<T>(
                                                         q),
                                      local);
    }

    @SafeVarargs
    public static <T extends Comparable<? super T>> LazyPOrderedSetX<T> POrderedSet(T... elements) {
        return LazyPOrderedSetX.fromPOrderedSet(of(elements), toPOrderedSet());
    }

    @Wither
    private final TreeSet<T> set;

    @Override
    public DexxPOrderedSet<T> plus(T e) {
       
        return withSet(set.add(e));
    }

    @Override
    public DexxPOrderedSet<T> plusAll(Collection<? extends T> l) {
        TreeSet<T> vec = set;
        for (T next : l) {
            vec = vec.add(next);
        }

        return withSet(vec);
       
    }

   

    
  

    @Override
    public POrderedSet<T> minus(Object e) {
        return withSet(set.remove((T)e));
        
    }

    @Override
    public POrderedSet<T> minusAll(Collection<?> s) {
        TreeSet<T> vec = set;
        for (Object next : s) {
            
            vec = vec.remove((T)next);
        }

        return withSet(vec);    
    }

  
   

    @Override
    public int size() {
        return set.size();
    }

    @Override
    public Iterator<T> iterator() {
        return set.iterator();
    }

    @Override
    public T get(int index) {
        return set.toIndexedList().get(index);
    }

    @Override
    public int indexOf(Object o) {
        return set.toIndexedList().indexOf((T)o);
    }

   

}
