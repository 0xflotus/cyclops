package cyclops.companion.vavr;


import cyclops.monads.VavrWitness.queue;
import io.vavr.Lazy;
import io.vavr.collection.*;
import io.vavr.concurrent.Future;
import io.vavr.control.*;
import com.aol.cyclops.vavr.hkt.*;
import cyclops.companion.CompletableFutures;
import cyclops.companion.Optionals;
import cyclops.control.Eval;
import cyclops.control.Maybe;
import cyclops.control.Reader;
import cyclops.control.Either;
import cyclops.conversion.vavr.FromCyclopsReact;
import cyclops.monads.*;
import cyclops.monads.VavrWitness.*;
import com.oath.cyclops.hkt.Higher;
import cyclops.function.Function3;
import cyclops.function.Function4;
import cyclops.function.Monoid;
import cyclops.monads.Witness.*;
import cyclops.reactive.ReactiveSeq;
import cyclops.typeclasses.*;
import com.aol.cyclops.vavr.hkt.TryKind;
import cyclops.companion.Monoids;
import cyclops.conversion.vavr.ToCyclopsReact;
import cyclops.monads.VavrWitness;
import com.oath.cyclops.data.collections.extensions.CollectionX;
import com.oath.cyclops.types.Value;
import com.oath.cyclops.types.anyM.AnyMValue;
import cyclops.collections.mutable.ListX;
import cyclops.function.Reducer;
import cyclops.monads.AnyM;
import cyclops.monads.VavrWitness.tryType;
import cyclops.monads.WitnessType;
import cyclops.monads.XorM;
import cyclops.typeclasses.comonad.Comonad;
import cyclops.typeclasses.foldable.Foldable;
import cyclops.typeclasses.foldable.Unfoldable;
import cyclops.typeclasses.functor.Functor;
import cyclops.typeclasses.instances.General;
import cyclops.typeclasses.monad.*;
import io.vavr.control.Try;
import lombok.experimental.UtilityClass;
import org.reactivestreams.Publisher;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.BiFunction;
import java.util.function.Function;


import static com.aol.cyclops.vavr.hkt.TryKind.narrowK;
import static com.aol.cyclops.vavr.hkt.TryKind.widen;

/**
 * Utility class for working with JDK Tryals
 *
 * @author johnmcclean
 *
 */
@UtilityClass
public class Trys {

    public static  <W1 extends WitnessType<W1>,T> XorM<W1,tryType,T> xorM(Try<T> type){
        return XorM.right(anyM(type));
    }
    public static  <W1 extends WitnessType<W1>,T> XorM<W1,tryType,T> xorM(T type){
        return xorM(Try.success(type));
    }
    public static  <W1,T> Coproduct<W1,tryType,T> coproduct(Try<T> type, InstanceDefinitions<W1> def1){
        return Coproduct.of(Either.right(widen(type)),def1, Instances.definitions());
    }
    public static  <W1,T> Coproduct<W1,tryType,T> coproductSuccess(T type, InstanceDefinitions<W1> def1){
        return coproduct(Try.success(type),def1);
    }
    public static  <W1,T> Coproduct<W1,tryType,T> coproductSuccess(Throwable e, InstanceDefinitions<W1> def1){
        return coproduct(Try.failure(e),def1);
    }
    public static <T> AnyMValue<tryType,T> anyM(Try<T> tryType) {
        return AnyM.ofValue(tryType, VavrWitness.tryType.INSTANCE);
    }
    public static <L, T, R> Try<R> tailRec(T initial, Function<? super T, ? extends Try<? extends Either<T, R>>> fn) {
        Try<? extends Either<T, R>> next[] = new Try[1];
        next[0] = Try.success(Either.left(initial));
        boolean cont = true;
        do {
            cont = next[0].map(p -> p.fold(s -> {
                next[0] = fn.apply(s);
                return true;
            }, pr -> false)).getOrElse(false);
        } while (cont);
        return next[0].map(Either::get);
    }
    public static <T, R> Try< R> tailRecEither(T initial, Function<? super T, ? extends Try<? extends Either<T, R>>> fn) {
        Try<? extends Either<T, R>> next[] = new Try[1];
        next[0] = Try.success(Either.left(initial));
        boolean cont = true;
        do {
            cont = next[0].map(p -> p.visit(s -> {
                next[0] = fn.apply(s);
                return true;
            }, pr -> false)).getOrElse(false);
        } while (cont);
        return next[0].map(Either::get);
    }
    /**
     * Perform a For Comprehension over a Try, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Trys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.oath.cyclops.reactor.Trys.forEach4;
     *
    forEach4(Try.just(1),
    a-> Try.just(a+1),
    (a,b) -> Try.<Integer>just(a+b),
    a                  (a,b,c) -> Try.<Integer>just(a+b+c),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param value3 Nested Try
     * @param value4 Nested Try
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> Try<R> forEach4(Try<? extends T1> value1,
                                                                 Function<? super T1, ? extends Try<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends Try<R2>> value3,
                                                                 Function3<? super T1, ? super R1, ? super R2, ? extends Try<R3>> value4,
                                                                 Function4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                Try<R2> b = value3.apply(in,ina);
                return b.flatMap(inb -> {
                    Try<R3> c = value4.apply(in,ina,inb);
                    return c.map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

    /**
     *
     * Perform a For Comprehension over a Try, accepting 3 generating function.
     * This results in a four level nested internal iteration over the provided Trys.
     *
     * <pre>
     * {@code
     *
     *  import static com.oath.cyclops.reactor.Trys.forEach4;
     *
     *  forEach4(Try.just(1),
    a-> Try.just(a+1),
    (a,b) -> Try.<Integer>just(a+b),
    (a,b,c) -> Try.<Integer>just(a+b+c),
    (a,b,c,d) -> a+b+c+d <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param value3 Nested Try
     * @param value4 Nested Try
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T1, T2, T3, R1, R2, R3, R> Try<R> forEach4(Try<? extends T1> value1,
                                                                 Function<? super T1, ? extends Try<R1>> value2,
                                                                 BiFunction<? super T1, ? super R1, ? extends Try<R2>> value3,
                                                                 Function3<? super T1, ? super R1, ? super R2, ? extends Try<R3>> value4,
                                                                 Function4<? super T1, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
                                                                 Function4<? super T1, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                Try<R2> b = value3.apply(in,ina);
                return b.flatMap(inb -> {
                    Try<R3> c = value4.apply(in,ina,inb);
                    return c.filter(in2->filterFunction.apply(in,ina,inb,in2))
                            .map(in2 -> yieldingFunction.apply(in, ina, inb, in2));
                });

            });

        });

    }

    /**
     * Perform a For Comprehension over a Try, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Trys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.oath.cyclops.reactor.Trys.forEach3;
     *
    forEach3(Try.just(1),
    a-> Try.just(a+1),
    (a,b) -> Try.<Integer>just(a+b),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param value3 Nested Try
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> Try<R> forEach3(Try<? extends T1> value1,
                                                         Function<? super T1, ? extends Try<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends Try<R2>> value3,
                                                         Function3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                Try<R2> b = value3.apply(in,ina);
                return b.map(in2 -> yieldingFunction.apply(in, ina, in2));
            });


        });

    }

    /**
     *
     * Perform a For Comprehension over a Try, accepting 2 generating function.
     * This results in a three level nested internal iteration over the provided Trys.
     *
     * <pre>
     * {@code
     *
     *  import static com.oath.cyclops.reactor.Trys.forEach3;
     *
     *  forEach3(Try.just(1),
    a-> Try.just(a+1),
    (a,b) -> Try.<Integer>just(a+b),
    (a,b,c) -> a+b+c <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param value3 Nested Try
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T1, T2, R1, R2, R> Try<R> forEach3(Try<? extends T1> value1,
                                                         Function<? super T1, ? extends Try<R1>> value2,
                                                         BiFunction<? super T1, ? super R1, ? extends Try<R2>> value3,
                                                         Function3<? super T1, ? super R1, ? super R2, Boolean> filterFunction,
                                                         Function3<? super T1, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.flatMap(ina -> {
                Try<R2> b = value3.apply(in,ina);
                return b.filter(in2->filterFunction.apply(in,ina,in2))
                        .map(in2 -> yieldingFunction.apply(in, ina, in2));
            });



        });

    }

    /**
     * Perform a For Comprehension over a Try, accepting a generating function.
     * This results in a two level nested internal iteration over the provided Trys.
     *
     *  <pre>
     * {@code
     *
     *   import static com.oath.cyclops.reactor.Trys.forEach;
     *
    forEach(Try.just(1),
    a-> Try.just(a+1),
    Tuple::tuple)
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T, R1, R> Try<R> forEach2(Try<? extends T> value1, Function<? super T, Try<R1>> value2,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.map(in2 -> yieldingFunction.apply(in,  in2));
        });



    }

    /**
     *
     * Perform a For Comprehension over a Try, accepting a generating function.
     * This results in a two level nested internal iteration over the provided Trys.
     *
     * <pre>
     * {@code
     *
     *  import static com.oath.cyclops.reactor.Trys.forEach;
     *
     *  forEach(Try.just(1),
    a-> Try.just(a+1),
    (a,b) -> Try.<Integer>just(a+b),
    (a,b,c) -> a+b+c <100,
    Tuple::tuple);
     *
     * }
     * </pre>
     *
     * @param value1 top level Try
     * @param value2 Nested Try
     * @param filterFunction A filtering function, keeps values where the predicate holds
     * @param yieldingFunction Generates a result per combination
     * @return Try with a combined value generated by the yielding function
     */
    public static <T, R1, R> Try<R> forEach2(Try<? extends T> value1, Function<? super T, ? extends Try<R1>> value2,
                                                BiFunction<? super T, ? super R1, Boolean> filterFunction,
                                                BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return value1.flatMap(in -> {

            Try<R1> a = value2.apply(in);
            return a.filter(in2->filterFunction.apply(in,in2))
                    .map(in2 -> yieldingFunction.apply(in,  in2));
        });




    }
    /**
     * Sequence operation, take a Collection of Trys and turn it into a Try with a Collection
     * By constrast with {@link Trys#sequencePresent(CollectionX)}, if any Trys are empty the result
     * is an empty Try
     *
     * <pre>
     * {@code
     *
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();
     *
     *  Try<ListX<Integer>> opts = Trys.sequence(ListX.of(just, none, Try.of(1)));
    //Try.empty();
     *
     * }
     * </pre>
     *
     *
     * @param opts Maybes to Sequence
     * @return  Maybe with a List of values
     */
    public static <T> Try<ListX<T>> sequence(final CollectionX<Try<T>> opts) {
        return sequence(opts.stream()).map(s -> s.toListX());

    }
    /**
     * Sequence operation, take a Collection of Trys and turn it into a Try with a Collection
     * Only successes are retained. By constrast with {@link Trys#sequence(CollectionX)} Try#empty types are
     * tolerated and ignored.
     *
     * <pre>
     * {@code
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();
     *
     * Try<ListX<Integer>> maybes = Trys.sequencePresent(ListX.of(just, none, Try.of(1)));
    //Try.of(ListX.of(10, 1));
     * }
     * </pre>
     *
     * @param opts Trys to Sequence
     * @return Try with a List of values
     */
    public static <T> Try<ListX<T>> sequencePresent(final CollectionX<Try<T>> opts) {
        return sequence(opts.stream().filter(Try::isSuccess)).map(s->s.toListX());
    }
    /**
     * Sequence operation, take a Collection of Trys and turn it into a Try with a Collection
     * By constrast with {@link Trys#sequencePresent(CollectionX)} if any Try types are empty
     * the return type will be an empty Try
     *
     * <pre>
     * {@code
     *
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();
     *
     *  Try<ListX<Integer>> maybes = Trys.sequence(ListX.of(just, none, Try.of(1)));
    //Try.empty();
     *
     * }
     * </pre>
     *
     *
     * @param opts Maybes to Sequence
     * @return  Try with a List of values
     */
    public static <T> Try<ReactiveSeq<T>> sequence(final java.util.stream.Stream<Try<T>> opts) {
        return AnyM.sequence(opts.map(Trys::anyM), tryType.INSTANCE)
                .map(ReactiveSeq::fromStream)
                .to(VavrWitness::tryType);

    }
    /**
     * Accummulating operation using the supplied Reducer (@see cyclops2.Reducers). A typical use case is to accumulate into a Persistent Collection type.
     * Accumulates the present results, ignores empty Trys.
     *
     * <pre>
     * {@code
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();

     * Try<PersistentSetX<Integer>> opts = Try.accumulateJust(ListX.of(just, none, Try.of(1)), Reducers.toPersistentSetX());
    //Try.of(PersistentSetX.of(10, 1)));
     *
     * }
     * </pre>
     *
     * @param tryTypeals Trys to accumulate
     * @param reducer Reducer to accumulate values with
     * @return Try with reduced value
     */
    public static <T, R> Try<R> accumulatePresent(final CollectionX<Try<T>> tryTypeals, final Reducer<R> reducer) {
        return sequencePresent(tryTypeals).map(s -> s.mapReduce(reducer));
    }
    /**
     * Accumulate the results only from those Trys which have a value present, using the supplied mapping function to
     * convert the data from each Try before reducing them using the supplied Monoid (a combining BiFunction/BinaryOperator and identity element that takes two
     * input values of the same type and returns the combined result) {@see cyclops2.Monoids }.
     *
     * <pre>
     * {@code
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();

     *  Try<String> opts = Try.accumulateJust(ListX.of(just, none, Try.of(1)), i -> "" + i,
    Monoids.stringConcat);
    //Try.of("101")
     *
     * }
     * </pre>
     *
     * @param tryTypeals Trys to accumulate
     * @param mapper Mapping function to be applied to the result of each Try
     * @param reducer Monoid to combine values from each Try
     * @return Try with reduced value
     */
    public static <T, R> Try<R> accumulatePresent(final CollectionX<Try<T>> tryTypeals, final Function<? super T, R> mapper,
                                                     final Monoid<R> reducer) {
        return sequencePresent(tryTypeals).map(s -> s.map(mapper)
                .reduce(reducer));
    }
    /**
     * Accumulate the results only from those Trys which have a value present, using the
     * supplied Monoid (a combining BiFunction/BinaryOperator and identity element that takes two
     * input values of the same type and returns the combined result) {@see cyclops2.Monoids }.
     *
     * <pre>
     * {@code
     *  Try<Integer> just = Try.of(10);
    Try<Integer> none = Try.empty();

     *  Try<String> opts = Try.accumulateJust(Monoids.stringConcat,ListX.of(just, none, Try.of(1)),
    );
    //Try.of("101")
     *
     * }
     * </pre>
     *
     * @param tryTypeals Trys to accumulate
     * @param reducer Monoid to combine values from each Try
     * @return Try with reduced value
     */
    public static <T> Try<T> accumulatePresent(final Monoid<T> reducer, final CollectionX<Try<T>> tryTypeals) {
        return sequencePresent(tryTypeals).map(s -> s
                .reduce(reducer));
    }

    /**
     * Combine an Try with the provided value using the supplied BiFunction
     *
     * <pre>
     * {@code
     *  Trys.combine(Try.of(10),Maybe.just(20), this::add)
     *  //Try[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     * @param f Try to combine with a value
     * @param v Value to combine
     * @param fn Combining function
     * @return Try combined with supplied value
     */
    public static <T1, T2, R> Try<R> combine(final Try<? extends T1> f, final Value<? extends T2> v,
                                                final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.toTry(ToCyclopsReact.toTry(f)
                .combine(v, fn)));
    }
    /**
     * Combine an Try with the provided Try using the supplied BiFunction
     *
     * <pre>
     * {@code
     *  Trys.combine(Try.of(10),Try.of(20), this::add)
     *  //Try[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     *
     * @param f Try to combine with a value
     * @param v Try to combine
     * @param fn Combining function
     * @return Try combined with supplied value, or empty Try if no value present
     */
    public static <T1, T2, R> Try<R> combine(final Try<? extends T1> f, final Try<? extends T2> v,
                                                final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return combine(f,ToCyclopsReact.toTry(v),fn);
    }

    /**
     * Combine an Try with the provided Iterable (selecting one element if present) using the supplied BiFunction
     * <pre>
     * {@code
     *  Trys.zip(Try.of(10),Arrays.asList(20), this::add)
     *  //Try[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     * @param f Try to combine with first element in Iterable (if present)
     * @param v Iterable to combine
     * @param fn Combining function
     * @return Try combined with supplied Iterable, or empty Try if no value present
     */
    public static <T1, T2, R> Try<R> zip(final Try<? extends T1> f, final Iterable<? extends T2> v,
                                            final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.toTry(ToCyclopsReact.toTry(f)
                .zip(v, fn)));
    }

    /**
     * Combine an Try with the provided Publisher (selecting one element if present) using the supplied BiFunction
     * <pre>
     * {@code
     *  Trys.zip(Flux.just(10),Try.of(10), this::add)
     *  //Try[30]
     *
     *  private int add(int a, int b) {
    return a + b;
    }
     *
     * }
     * </pre>
     *
     * @param p Publisher to combine
     * @param f  Try to combine with
     * @param fn Combining function
     * @return Try combined with supplied Publisher, or empty Try if no value present
     */
    public static <T1, T2, R> Try<R> zip(final Publisher<? extends T2> p, final Try<? extends T1> f,
                                            final BiFunction<? super T1, ? super T2, ? extends R> fn) {
        return narrow(FromCyclopsReact.toTry(ToCyclopsReact.toTry(f)
                .zipP(p, fn)));
    }
    /**
     * Narrow covariant type parameter
     *
     * @param tryTypeal Try with covariant type parameter
     * @return Narrowed Try
     */
    public static <T> Try<T> narrow(final Try<? extends T> tryTypeal) {
        return (Try<T>) tryTypeal;
    }

    public static <T> Active<tryType,T> allTypeclasses(Try<T> tryType){
        return Active.of(widen(tryType), Trys.Instances.definitions());
    }
    public static <T,W2,R> Nested<tryType,W2,R> mapM(Try<T> tryType, Function<? super T,? extends Higher<W2,R>> fn, InstanceDefinitions<W2> defs){
        Try<Higher<W2, R>> e = tryType.map(fn);
        TryKind<Higher<W2, R>> lk = widen(e);
        return Nested.of(lk, Trys.Instances.definitions(), defs);
    }

    /**
     * Companion class for creating Type Class instances for working with Trys
     * @author johnmcclean
     *
     */
    @UtilityClass
    public static class Instances {

        public static InstanceDefinitions<tryType> definitions() {
            return new InstanceDefinitions<tryType>() {

                @Override
                public <T, R> Functor<tryType> functor() {
                    return Instances.functor();
                }

                @Override
                public <T> Pure<tryType> unit() {
                    return Instances.unit();
                }

                @Override
                public <T, R> Applicative<tryType> applicative() {
                    return Instances.applicative();
                }

                @Override
                public <T, R> Monad<tryType> monad() {
                    return Instances.monad();
                }

                @Override
                public <T, R> Maybe<MonadZero<tryType>> monadZero() {
                    return Maybe.just(Instances.monadZero());
                }

                @Override
                public <T> Maybe<MonadPlus<tryType>> monadPlus() {
                    return Maybe.just(Instances.monadPlus());
                }

                @Override
                public <T> MonadRec<tryType> monadRec() {
                    return Instances.monadRec();
                }

                @Override
                public <T> Maybe<MonadPlus<tryType>> monadPlus(Monoid<Higher<tryType, T>> m) {
                    return Maybe.just(Instances.monadPlus(m));
                }

                @Override
                public <C2, T> Traverse<tryType> traverse() {
                    return Instances.traverse();
                }

                @Override
                public <T>  Foldable<tryType> foldable() {
                    return Instances.foldable();
                }

                @Override
                public <T> Maybe<Comonad<tryType>> comonad() {
                    return Maybe.just(Instances.comonad());
                }

                @Override
                public <T> Maybe<Unfoldable<tryType>> unfoldable() {
                    return Maybe.nothing();
                }
            };
        }

        /**
         *
         * Transform a Try, mulitplying every element by 2
         *
         * <pre>
         * {@code
         *  TryKind<Integer> tryType = Trys.functor().map(i->i*2, TryKind.widen(Try.successful(1));
         *
         *  //[2]
         *
         *
         * }
         * </pre>
         *
         * An example fluent api working with Trys
         * <pre>
         * {@code
         *   TryKind<Integer> ft = Trys.unit()
        .unit("hello")
        .then(h->Trys.functor().map((String v) ->v.length(), h))
        .convert(TryKind::narrowK);
         *
         * }
         * </pre>
         *
         *
         * @return A functor for Trys
         */
        public static <T,R>Functor<tryType> functor(){
            BiFunction<TryKind<T>,Function<? super T, ? extends R>,TryKind<R>> map = Instances::map;
            return General.functor(map);
        }
        /**
         * <pre>
         * {@code
         * TryKind<String> ft = Trys.unit()
        .unit("hello")
        .convert(TryKind::narrowK);

        //Arrays.asTry("hello"))
         *
         * }
         * </pre>
         *
         *
         * @return A factory for Trys
         */
        public static <T> Pure<tryType> unit(){
            return General.<tryType,T>unit(Instances::of);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.TryKind.widen;
         * import static com.aol.cyclops.util.function.Lambda.l1;
         *
        Trys.applicative()
        .ap(widen(Try.successful(l1(this::multiplyByTwo))),widen(asTry(1,2,3)));
         *
         * //[2,4,6]
         * }
         * </pre>
         *
         *
         * Example fluent API
         * <pre>
         * {@code
         * TryKind<Function<Integer,Integer>> ftFn =Trys.unit()
         *                                                  .unit(Lambda.l1((Integer i) ->i*2))
         *                                                  .convert(TryKind::narrowK);

        TryKind<Integer> ft = Trys.unit()
        .unit("hello")
        .then(h->Trys.functor().map((String v) ->v.length(), h))
        .then(h->Trys.applicative().ap(ftFn, h))
        .convert(TryKind::narrowK);

        //Arrays.asTry("hello".length()*2))
         *
         * }
         * </pre>
         *
         *
         * @return A zipper for Trys
         */
        public static <T,R> Applicative<tryType> applicative(){
            BiFunction<TryKind< Function<T, R>>,TryKind<T>,TryKind<R>> ap = Instances::ap;
            return General.applicative(functor(), unit(), ap);
        }
        /**
         *
         * <pre>
         * {@code
         * import static com.aol.cyclops.hkt.jdk.TryKind.widen;
         * TryKind<Integer> ft  = Trys.monad()
        .flatMap(i->widen(Try.successful(i), widen(Try.successful(3))
        .convert(TryKind::narrowK);
         * }
         * </pre>
         *
         * Example fluent API
         * <pre>
         * {@code
         *    TryKind<Integer> ft = Trys.unit()
        .unit("hello")
        .then(h->Trys.monad().flatMap((String v) ->Trys.unit().unit(v.length()), h))
        .convert(TryKind::narrowK);

        //Arrays.asTry("hello".length())
         *
         * }
         * </pre>
         *
         * @return Type class with monad functions for Trys
         */
        public static <T,R> Monad<tryType> monad(){

            BiFunction<Higher<tryType,T>,Function<? super T, ? extends Higher<tryType,R>>,Higher<tryType,R>> flatMap = Instances::flatMap;
            return General.monad(applicative(), flatMap);
        }
        public static <T,R> MonadRec<tryType> monadRec() {
            return new MonadRec<tryType>() {
                @Override
                public <T, R> Higher<tryType, R> tailRec(T initial, Function<? super T, ? extends Higher<tryType, ? extends Either<T, R>>> fn) {
                    return widen(Trys.tailRecEither(initial,fn.andThen(TryKind::narrowK)));
                }
            };
        }
            /**
             *
             * <pre>
             * {@code
             *  TryKind<String> ft = Trys.unit()
            .unit("hello")
            .then(h->Trys.monadZero().filter((String t)->t.startsWith("he"), h))
            .convert(TryKind::narrowK);

            //Arrays.asTry("hello"));
             *
             * }
             * </pre>
             *
             *
             * @return A filterable monad (with default value)
             */
        public static <T,R> MonadZero<tryType> monadZero(){

            return General.monadZero(monad(), TryKind.failed(new NoSuchElementException()));
        }
        /**
         * <pre>
         * {@code
         *  TryKind<Integer> ft = Trys.<Integer>monadPlus()
        .plus(TryKind.widen(Arrays.asTry()), TryKind.widen(Try.successful((10)))
        .convert(TryKind::narrowK);
        //Try(10)
         *
         * }
         * </pre>
         * @return Type class for combining Trys by concatenation
         */
        public static <T> MonadPlus<tryType> monadPlus(){
            Monoid<cyclops.control.Try<T,Throwable>> mn = Monoids.firstTrySuccess(new NoSuchElementException());
            Monoid<TryKind<T>> m = Monoid.of(widen(mn.zero()), (f, g)-> widen(
                    mn.apply(ToCyclopsReact.toTry(f), ToCyclopsReact.toTry(g))));

            Monoid<Higher<tryType,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }
        /**
         *
         * <pre>
         * {@code
         *  Monoid<TryKind<Integer>> m = Monoid.of(TryKind.widen(Try.failed(e), (a,b)->a.isEmpty() ? b : a);
        TryKind<Integer> ft = Trys.<Integer>monadPlus(m)
        .plus(TryKind.widen(Try.successful(5), TryKind.widen(Try.successful(10))
        .convert(TryKind::narrowK);
        //Try(5)
         *
         * }
         * </pre>
         *
         * @param m Monoid to use for combining Trys
         * @return Type class for combining Trys
         */
        public static <T> MonadPlus<tryType> monadPlus(Monoid<Higher<tryType, T>> m){
            Monoid<Higher<tryType,T>> m2= (Monoid)m;
            return General.monadPlus(monadZero(),m2);
        }

        /**
         * @return Type class for traversables with traverse / sequence operations
         */
        public static <C2,T> Traverse<tryType> traverse(){

            return General.traverseByTraverse(applicative(), Instances::traverseA);
        }

        /**
         *
         * <pre>
         * {@code
         * int sum  = Trys.foldable()
        .foldLeft(0, (a,b)->a+b, TryKind.widen(Try.successful(4));

        //4
         *
         * }
         * </pre>
         *
         *
         * @return Type class for folding / reduction operations
         */
        public static <T> Foldable<tryType> foldable(){
            return new Foldable<tryType>() {
                @Override
                public <T> T foldRight(Monoid<T> monoid, Higher<tryType, T> ds) {
                    return narrowK(ds).getOrElse(monoid.zero());
                }

                @Override
                public <T> T foldLeft(Monoid<T> monoid, Higher<tryType, T> ds) {
                    return narrowK(ds).getOrElse(monoid.zero());
                }

                @Override
                public <T, R> R foldMap(Monoid<R> mb, Function<? super T, ? extends R> fn, Higher<tryType, T> nestedA) {
                    return narrowK(nestedA).<R>map(fn).getOrElse(mb.zero());
                }
            };

        }
        public static <T> Comonad<tryType> comonad(){
            Function<? super Higher<tryType, T>, ? extends T> extractFn = maybe -> maybe.convert(TryKind::narrow).get();
            return General.comonad(functor(), unit(), extractFn);
        }

        private <T> TryKind<T> of(T value){
            return widen(Try.success(value));
        }
        private static <T,R> TryKind<R> ap(TryKind<Function< T, R>> lt, TryKind<T> list){
            return widen(ToCyclopsReact.toTry(lt).combine(ToCyclopsReact.toTry(list), (a, b)->a.apply(b)));

        }
        private static <T,R> Higher<tryType,R> flatMap(Higher<tryType,T> lt, Function<? super T, ? extends  Higher<tryType,R>> fn){
            return widen(TryKind.narrow(lt).flatMap(fn.andThen(TryKind::narrowK)));
        }
        private static <T,R> TryKind<R> map(TryKind<T> lt, Function<? super T, ? extends R> fn){
            return widen(lt.map(fn));
        }


        private static <C2,T,R> Higher<C2, Higher<tryType, R>> traverseA(Applicative<C2> applicative, Function<? super T, ? extends Higher<C2, R>> fn,
                                                                         Higher<tryType, T> ds){
            Try<T> tryType = TryKind.narrow(ds);
            return applicative.map(TryKind::successful, fn.apply(tryType.get()));
        }

    }

    public static interface TryNested{


        public static <T> Nested<tryType,lazy,T> lazy(Try<Lazy<T>> type){
            return Nested.of(widen(type.map(LazyKind::widen)),Instances.definitions(),Lazys.Instances.definitions());
        }
        public static <T> Nested<tryType,tryType,T> tryTry(Try<Try<T>> type){
            return Nested.of(widen(type.map(TryKind::widen)),Instances.definitions(),Trys.Instances.definitions());
        }
        public static <T> Nested<tryType,VavrWitness.future,T> future(Try<Future<T>> type){
            return Nested.of(widen(type.map(FutureKind::widen)),Instances.definitions(),Futures.Instances.definitions());
        }
        public static <T> Nested<tryType,queue,T> queue(Try<Queue<T>> nested){
            return Nested.of(widen(nested.map(QueueKind::widen)),Instances.definitions(),Queues.Instances.definitions());
        }
        public static <L, R> Nested<tryType,Higher<VavrWitness.either,L>, R> either(Try<Either<L, R>> nested){
            return Nested.of(widen(nested.map(EitherKind::widen)),Instances.definitions(),Eithers.Instances.definitions());
        }
        public static <T> Nested<tryType,VavrWitness.stream,T> stream(Try<Stream<T>> nested){
            return Nested.of(widen(nested.map(StreamKind::widen)),Instances.definitions(),Streams.Instances.definitions());
        }
        public static <T> Nested<tryType,VavrWitness.list,T> list(Try<List<T>> nested){
            return Nested.of(widen(nested.map(ListKind::widen)), Instances.definitions(),Lists.Instances.definitions());
        }
        public static <T> Nested<tryType,array,T> array(Try<Array<T>> nested){
            return Nested.of(widen(nested.map(ArrayKind::widen)),Instances.definitions(),Arrays.Instances.definitions());
        }
        public static <T> Nested<tryType,vector,T> vector(Try<Vector<T>> nested){
            return Nested.of(widen(nested.map(VectorKind::widen)),Instances.definitions(),Vectors.Instances.definitions());
        }
        public static <T> Nested<tryType,hashSet,T> set(Try<HashSet<T>> nested){
            return Nested.of(widen(nested.map(HashSetKind::widen)),Instances.definitions(), HashSets.Instances.definitions());
        }

        public static <T> Nested<tryType,reactiveSeq,T> reactiveSeq(Try<ReactiveSeq<T>> nested){
            TryKind<ReactiveSeq<T>> x = widen(nested);
            TryKind<Higher<reactiveSeq,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),ReactiveSeq.Instances.definitions());
        }

        public static <T> Nested<tryType,maybe,T> maybe(Try<Maybe<T>> nested){
            TryKind<Maybe<T>> x = widen(nested);
            TryKind<Higher<maybe,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),Maybe.Instances.definitions());
        }
        public static <T> Nested<tryType,eval,T> eval(Try<Eval<T>> nested){
            TryKind<Eval<T>> x = widen(nested);
            TryKind<Higher<eval,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),Eval.Instances.definitions());
        }
        public static <T> Nested<tryType,Witness.future,T> cyclopsFuture(Try<cyclops.async.Future<T>> nested){
            TryKind<cyclops.async.Future<T>> x = widen(nested);
            TryKind<Higher<Witness.future,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),cyclops.async.Future.Instances.definitions());
        }
        public static <S, P> Nested<tryType,Higher<Witness.either,S>, P> xor(Try<Either<S, P>> nested){
            TryKind<Either<S, P>> x = widen(nested);
            TryKind<Higher<Higher<Witness.either,S>, P>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),Either.Instances.definitions());
        }
        public static <S,T> Nested<tryType,Higher<reader,S>, T> reader(Try<Reader<S, T>> nested, S defaultValue){
            TryKind<Reader<S, T>> x = widen(nested);
            TryKind<Higher<Higher<reader,S>, T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),Reader.Instances.definitions(defaultValue));
        }
        public static <S extends Throwable, P> Nested<tryType,Higher<Witness.tryType,S>, P> cyclopsTry(Try<cyclops.control.Try<P, S>> nested){
            TryKind<cyclops.control.Try<P, S>> x = widen(nested);
            TryKind<Higher<Higher<Witness.tryType,S>, P>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(),cyclops.control.Try.Instances.definitions());
        }
        public static <T> Nested<tryType,optional,T> tryTypeal(Try<Optional<T>> nested){
            TryKind<Optional<T>> x = widen(nested);
            TryKind<Higher<optional,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(), Optionals.Instances.definitions());
        }
        public static <T> Nested<tryType,completableFuture,T> completableTry(Try<CompletableFuture<T>> nested){
            TryKind<CompletableFuture<T>> x = widen(nested);
            TryKind<Higher<completableFuture,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(), CompletableFutures.Instances.definitions());
        }
        public static <T> Nested<tryType,Witness.stream,T> javaStream(Try<java.util.stream.Stream<T>> nested){
            TryKind<java.util.stream.Stream<T>> x = widen(nested);
            TryKind<Higher<Witness.stream,T>> y = (TryKind)x;
            return Nested.of(y,Instances.definitions(), cyclops.companion.Streams.Instances.definitions());
        }



    }
    public static interface NestedTry{
        public static <T> Nested<reactiveSeq,tryType,T> reactiveSeq(ReactiveSeq<Try<T>> nested){
            ReactiveSeq<Higher<tryType,T>> x = nested.map(TryKind::widenK);
            return Nested.of(x,ReactiveSeq.Instances.definitions(),Instances.definitions());
        }

        public static <T> Nested<maybe,tryType,T> maybe(Maybe<Try<T>> nested){
            Maybe<Higher<tryType,T>> x = nested.map(TryKind::widenK);

            return Nested.of(x,Maybe.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<eval,tryType,T> eval(Eval<Try<T>> nested){
            Eval<Higher<tryType,T>> x = nested.map(TryKind::widenK);

            return Nested.of(x,Eval.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<Witness.future,tryType,T> cyclopsFuture(cyclops.async.Future<Try<T>> nested){
            cyclops.async.Future<Higher<tryType,T>> x = nested.map(TryKind::widenK);

            return Nested.of(x,cyclops.async.Future.Instances.definitions(),Instances.definitions());
        }
        public static <S, P> Nested<Higher<Witness.either,S>,tryType, P> xor(Either<S, Try<P>> nested){
            Either<S, Higher<tryType,P>> x = nested.map(TryKind::widenK);

            return Nested.of(x,Either.Instances.definitions(),Instances.definitions());
        }
        public static <S,T> Nested<Higher<reader,S>,tryType, T> reader(Reader<S, Try<T>> nested, S defaultValue){

            Reader<S, Higher<tryType, T>>  x = nested.map(TryKind::widenK);

            return Nested.of(x,Reader.Instances.definitions(defaultValue),Instances.definitions());
        }
        public static <S extends Throwable, P> Nested<Higher<Witness.tryType,S>,tryType, P> cyclopsTry(cyclops.control.Try<Try<P>, S> nested){
            cyclops.control.Try<Higher<tryType,P>, S> x = nested.map(TryKind::widenK);

            return Nested.of(x,cyclops.control.Try.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<optional,tryType,T> tryTypeal(Optional<Try<T>> nested){
            Optional<Higher<tryType,T>> x = nested.map(TryKind::widenK);

            return  Nested.of(Optionals.OptionalKind.widen(x), Optionals.Instances.definitions(), Instances.definitions());
        }
        public static <T> Nested<completableFuture,tryType,T> completableTry(CompletableFuture<Try<T>> nested){
            CompletableFuture<Higher<tryType,T>> x = nested.thenApply(TryKind::widenK);

            return Nested.of(CompletableFutures.CompletableFutureKind.widen(x), CompletableFutures.Instances.definitions(),Instances.definitions());
        }
        public static <T> Nested<Witness.stream,tryType,T> javaStream(java.util.stream.Stream<Try<T>> nested){
            java.util.stream.Stream<Higher<tryType,T>> x = nested.map(TryKind::widenK);

            return Nested.of(cyclops.companion.Streams.StreamKind.widen(x), cyclops.companion.Streams.Instances.definitions(),Instances.definitions());
        }
    }



}
